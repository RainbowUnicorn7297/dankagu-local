from google.protobuf.internal import enum_type_wrapper as _enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from typing import ClassVar as _ClassVar, Mapping as _Mapping, Optional as _Optional, Union as _Union

DESCRIPTOR: _descriptor.FileDescriptor

class EventSchema(_message.Message):
    __slots__ = []
    class AccountOption(_message.Message):
        __slots__ = ["account_flag", "common"]
        ACCOUNT_FLAG_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        account_flag: int
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., account_flag: _Optional[int] = ...) -> None: ...
    class AdvertiseView(_message.Message):
        __slots__ = ["ad_unit_id", "af_count", "appear_special_chance", "bf_count", "common", "item_id", "item_num", "sp_chance_flag", "sp_chance_step", "view_route"]
        AD_UNIT_ID_FIELD_NUMBER: _ClassVar[int]
        AF_COUNT_FIELD_NUMBER: _ClassVar[int]
        APPEAR_SPECIAL_CHANCE_FIELD_NUMBER: _ClassVar[int]
        BF_COUNT_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        SP_CHANCE_FLAG_FIELD_NUMBER: _ClassVar[int]
        SP_CHANCE_STEP_FIELD_NUMBER: _ClassVar[int]
        VIEW_ROUTE_FIELD_NUMBER: _ClassVar[int]
        ad_unit_id: str
        af_count: int
        appear_special_chance: int
        bf_count: int
        common: EventSchema.Common
        item_id: str
        item_num: str
        sp_chance_flag: int
        sp_chance_step: int
        view_route: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., ad_unit_id: _Optional[str] = ..., view_route: _Optional[int] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ..., bf_count: _Optional[int] = ..., af_count: _Optional[int] = ..., appear_special_chance: _Optional[int] = ..., sp_chance_flag: _Optional[int] = ..., sp_chance_step: _Optional[int] = ...) -> None: ...
    class Banner(_message.Message):
        __slots__ = ["banner_id", "banner_place", "common", "end_date", "start_date"]
        BANNER_ID_FIELD_NUMBER: _ClassVar[int]
        BANNER_PLACE_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        END_DATE_FIELD_NUMBER: _ClassVar[int]
        START_DATE_FIELD_NUMBER: _ClassVar[int]
        banner_id: int
        banner_place: int
        common: EventSchema.Common
        end_date: str
        start_date: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., start_date: _Optional[str] = ..., end_date: _Optional[str] = ..., banner_place: _Optional[int] = ..., banner_id: _Optional[int] = ...) -> None: ...
    class Birthday(_message.Message):
        __slots__ = ["birthday", "common"]
        BIRTHDAY_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        birthday: str
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., birthday: _Optional[str] = ...) -> None: ...
    class Boost(_message.Message):
        __slots__ = ["af", "common", "heal", "use_item_id", "use_item_num", "use_place_id"]
        AF_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        HEAL_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        USE_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        af: int
        common: EventSchema.Common
        heal: int
        use_item_id: str
        use_item_num: str
        use_place_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., heal: _Optional[int] = ..., af: _Optional[int] = ..., use_item_id: _Optional[str] = ..., use_item_num: _Optional[str] = ..., use_place_id: _Optional[int] = ...) -> None: ...
    class BoxGacha(_message.Message):
        __slots__ = ["common", "event_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        event_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., event_id: _Optional[int] = ...) -> None: ...
    class BoxGachaServerPayload(_message.Message):
        __slots__ = ["af_box_remain", "box_step", "exec_num", "gacha_id", "get_item_info", "num_free_crystal", "num_paid_crystal", "paid_amount", "paid_id", "transaction_id"]
        AF_BOX_REMAIN_FIELD_NUMBER: _ClassVar[int]
        BOX_STEP_FIELD_NUMBER: _ClassVar[int]
        EXEC_NUM_FIELD_NUMBER: _ClassVar[int]
        GACHA_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_INFO_FIELD_NUMBER: _ClassVar[int]
        NUM_FREE_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        NUM_PAID_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        PAID_AMOUNT_FIELD_NUMBER: _ClassVar[int]
        PAID_ID_FIELD_NUMBER: _ClassVar[int]
        TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
        af_box_remain: int
        box_step: int
        exec_num: int
        gacha_id: str
        get_item_info: str
        num_free_crystal: int
        num_paid_crystal: int
        paid_amount: int
        paid_id: str
        transaction_id: str
        def __init__(self, num_free_crystal: _Optional[int] = ..., num_paid_crystal: _Optional[int] = ..., transaction_id: _Optional[str] = ..., gacha_id: _Optional[str] = ..., exec_num: _Optional[int] = ..., get_item_info: _Optional[str] = ..., paid_id: _Optional[str] = ..., paid_amount: _Optional[int] = ..., af_box_remain: _Optional[int] = ..., box_step: _Optional[int] = ...) -> None: ...
    class CardDeepen(_message.Message):
        __slots__ = ["af_burst_skill_level", "af_co", "af_deepen_exp", "af_deepen_lv", "af_em", "af_odekake_skill_lv", "af_passive_skill_level", "af_ro", "af_skill_lv", "af_ttl", "bf_burst_skill_level", "bf_co", "bf_deepen_exp", "bf_deepen_lv", "bf_em", "bf_odekake_skill_lv", "bf_passive_skill_level", "bf_ro", "bf_skill_lv", "bf_ttl", "card_id", "char_id", "common", "instance_id", "item_id", "item_num", "rarity", "use_instance_id"]
        AF_BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        AF_CO_FIELD_NUMBER: _ClassVar[int]
        AF_DEEPEN_EXP_FIELD_NUMBER: _ClassVar[int]
        AF_DEEPEN_LV_FIELD_NUMBER: _ClassVar[int]
        AF_EM_FIELD_NUMBER: _ClassVar[int]
        AF_ODEKAKE_SKILL_LV_FIELD_NUMBER: _ClassVar[int]
        AF_PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        AF_RO_FIELD_NUMBER: _ClassVar[int]
        AF_SKILL_LV_FIELD_NUMBER: _ClassVar[int]
        AF_TTL_FIELD_NUMBER: _ClassVar[int]
        BF_BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        BF_CO_FIELD_NUMBER: _ClassVar[int]
        BF_DEEPEN_EXP_FIELD_NUMBER: _ClassVar[int]
        BF_DEEPEN_LV_FIELD_NUMBER: _ClassVar[int]
        BF_EM_FIELD_NUMBER: _ClassVar[int]
        BF_ODEKAKE_SKILL_LV_FIELD_NUMBER: _ClassVar[int]
        BF_PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        BF_RO_FIELD_NUMBER: _ClassVar[int]
        BF_SKILL_LV_FIELD_NUMBER: _ClassVar[int]
        BF_TTL_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        RARITY_FIELD_NUMBER: _ClassVar[int]
        USE_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        af_burst_skill_level: int
        af_co: int
        af_deepen_exp: int
        af_deepen_lv: int
        af_em: int
        af_odekake_skill_lv: int
        af_passive_skill_level: int
        af_ro: int
        af_skill_lv: int
        af_ttl: int
        bf_burst_skill_level: int
        bf_co: int
        bf_deepen_exp: int
        bf_deepen_lv: int
        bf_em: int
        bf_odekake_skill_lv: int
        bf_passive_skill_level: int
        bf_ro: int
        bf_skill_lv: int
        bf_ttl: int
        card_id: int
        char_id: int
        common: EventSchema.Common
        instance_id: int
        item_id: str
        item_num: str
        rarity: int
        use_instance_id: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., char_id: _Optional[int] = ..., card_id: _Optional[int] = ..., instance_id: _Optional[int] = ..., use_instance_id: _Optional[str] = ..., bf_skill_lv: _Optional[int] = ..., af_skill_lv: _Optional[int] = ..., bf_em: _Optional[int] = ..., af_em: _Optional[int] = ..., bf_co: _Optional[int] = ..., af_co: _Optional[int] = ..., bf_ro: _Optional[int] = ..., af_ro: _Optional[int] = ..., bf_ttl: _Optional[int] = ..., af_ttl: _Optional[int] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ..., rarity: _Optional[int] = ..., bf_deepen_lv: _Optional[int] = ..., af_deepen_lv: _Optional[int] = ..., bf_deepen_exp: _Optional[int] = ..., af_deepen_exp: _Optional[int] = ..., bf_passive_skill_level: _Optional[int] = ..., af_passive_skill_level: _Optional[int] = ..., bf_burst_skill_level: _Optional[int] = ..., af_burst_skill_level: _Optional[int] = ..., bf_odekake_skill_lv: _Optional[int] = ..., af_odekake_skill_lv: _Optional[int] = ...) -> None: ...
    class CardEnhance(_message.Message):
        __slots__ = ["af_co", "af_em", "af_exp", "af_main_lv", "af_ro", "af_ttl", "bf_co", "bf_em", "bf_main_lv", "bf_ro", "bf_ttl", "card_id", "char_id", "common", "emblem_id", "get_exp", "instance_id", "item_id", "item_num", "main_lv_limit", "rarity", "use_dream"]
        AF_CO_FIELD_NUMBER: _ClassVar[int]
        AF_EM_FIELD_NUMBER: _ClassVar[int]
        AF_EXP_FIELD_NUMBER: _ClassVar[int]
        AF_MAIN_LV_FIELD_NUMBER: _ClassVar[int]
        AF_RO_FIELD_NUMBER: _ClassVar[int]
        AF_TTL_FIELD_NUMBER: _ClassVar[int]
        BF_CO_FIELD_NUMBER: _ClassVar[int]
        BF_EM_FIELD_NUMBER: _ClassVar[int]
        BF_MAIN_LV_FIELD_NUMBER: _ClassVar[int]
        BF_RO_FIELD_NUMBER: _ClassVar[int]
        BF_TTL_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EMBLEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_EXP_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        MAIN_LV_LIMIT_FIELD_NUMBER: _ClassVar[int]
        RARITY_FIELD_NUMBER: _ClassVar[int]
        USE_DREAM_FIELD_NUMBER: _ClassVar[int]
        af_co: int
        af_em: int
        af_exp: int
        af_main_lv: int
        af_ro: int
        af_ttl: int
        bf_co: int
        bf_em: int
        bf_main_lv: int
        bf_ro: int
        bf_ttl: int
        card_id: int
        char_id: int
        common: EventSchema.Common
        emblem_id: int
        get_exp: int
        instance_id: int
        item_id: str
        item_num: str
        main_lv_limit: int
        rarity: int
        use_dream: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., char_id: _Optional[int] = ..., card_id: _Optional[int] = ..., instance_id: _Optional[int] = ..., get_exp: _Optional[int] = ..., af_exp: _Optional[int] = ..., bf_main_lv: _Optional[int] = ..., af_main_lv: _Optional[int] = ..., main_lv_limit: _Optional[int] = ..., bf_em: _Optional[int] = ..., af_em: _Optional[int] = ..., bf_co: _Optional[int] = ..., af_co: _Optional[int] = ..., bf_ro: _Optional[int] = ..., af_ro: _Optional[int] = ..., bf_ttl: _Optional[int] = ..., af_ttl: _Optional[int] = ..., use_dream: _Optional[int] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ..., rarity: _Optional[int] = ..., emblem_id: _Optional[int] = ...) -> None: ...
    class CardFlowering(_message.Message):
        __slots__ = ["af_danmaku_lv", "af_limit_lv", "bf_danmaku_lv", "bf_limit_lv", "card_id", "char_id", "common", "episode_id", "flowering_num", "instance_id", "item_id", "item_num", "rarity", "use_dream"]
        AF_DANMAKU_LV_FIELD_NUMBER: _ClassVar[int]
        AF_LIMIT_LV_FIELD_NUMBER: _ClassVar[int]
        BF_DANMAKU_LV_FIELD_NUMBER: _ClassVar[int]
        BF_LIMIT_LV_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EPISODE_ID_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_NUM_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        RARITY_FIELD_NUMBER: _ClassVar[int]
        USE_DREAM_FIELD_NUMBER: _ClassVar[int]
        af_danmaku_lv: int
        af_limit_lv: int
        bf_danmaku_lv: int
        bf_limit_lv: int
        card_id: int
        char_id: int
        common: EventSchema.Common
        episode_id: int
        flowering_num: int
        instance_id: int
        item_id: str
        item_num: str
        rarity: int
        use_dream: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., char_id: _Optional[int] = ..., card_id: _Optional[int] = ..., instance_id: _Optional[int] = ..., bf_limit_lv: _Optional[int] = ..., af_limit_lv: _Optional[int] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ..., use_dream: _Optional[int] = ..., rarity: _Optional[int] = ..., episode_id: _Optional[int] = ..., flowering_num: _Optional[int] = ..., bf_danmaku_lv: _Optional[int] = ..., af_danmaku_lv: _Optional[int] = ...) -> None: ...
    class ChallengeStageEnd(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill", "active_skill_id", "active_skill_t", "af_high_score_rate", "af_nakayoshi_lv", "af_nakayoshi_pt", "auto_active_flag", "auto_mode_flag", "ave_fps", "best_defeat_time", "bf_high_score_rate", "bomb_num", "bomb_time", "boost_ratio", "boost_reward_ratio", "boss_atack_option", "boss_damage", "boss_hp", "boss_id", "boss_target", "burst_skill", "burst_skill_id", "burst_skill_t", "card_id", "card_level", "clear_danmaku", "combo_num", "combo_target", "common", "continue_num", "daily_bonus_flag", "danmaku_flag", "danmaku_id", "deck_id", "defeat_time", "detailed_combo", "detailed_notes", "detailed_score_adjust", "detailed_score_base", "detailed_score_up_bonus", "difficulty", "dream_point", "drop_item_id", "drop_item_num", "event_bonus_point", "event_id", "event_point_id", "full_combo_flag", "gage_bonus", "get_card_exp", "get_event_point", "get_nakayoshi_pt", "get_point_charm", "get_power_charm", "get_user_exp", "heroine_id", "heroine_lv", "high_score", "life_result", "low_fps", "max_damage", "miss_num", "miss_time", "music_id", "mv_flag", "new_full_combo", "new_p_full_combo", "new_score_rank", "notes", "notes_size_option", "original_event_point", "passive_skill", "passive_skill_id", "passive_skill_t", "private_score_ranking", "rank_bonus_point", "rehearsal_flag", "remaint_boost", "result", "retry_life", "retry_self", "score", "score_rank", "score_target", "session_id", "skip_ticket_num", "spell_break_flag", "spell_card_id", "spell_card_place_id", "start_t", "total_score_ranking", "ttl_event_point", "unlock_bgm_flag", "unlock_bgm_id", "use_boost"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        AF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        AUTO_ACTIVE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AVE_FPS_FIELD_NUMBER: _ClassVar[int]
        BEST_DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        BF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        BOMB_NUM_FIELD_NUMBER: _ClassVar[int]
        BOMB_TIME_FIELD_NUMBER: _ClassVar[int]
        BOOST_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOSS_ATACK_OPTION_FIELD_NUMBER: _ClassVar[int]
        BOSS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        BOSS_HP_FIELD_NUMBER: _ClassVar[int]
        BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        BOSS_TARGET_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CLEAR_DANMAKU_FIELD_NUMBER: _ClassVar[int]
        COMBO_NUM_FIELD_NUMBER: _ClassVar[int]
        COMBO_TARGET_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_NUM_FIELD_NUMBER: _ClassVar[int]
        DAILY_BONUS_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_ID_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        DETAILED_COMBO_FIELD_NUMBER: _ClassVar[int]
        DETAILED_NOTES_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_ADJUST_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_BASE_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_UP_BONUS_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        DREAM_POINT_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        EVENT_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_POINT_ID_FIELD_NUMBER: _ClassVar[int]
        FULL_COMBO_FLAG_FIELD_NUMBER: _ClassVar[int]
        GAGE_BONUS_FIELD_NUMBER: _ClassVar[int]
        GET_CARD_EXP_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        GET_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        GET_POINT_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_POWER_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_USER_EXP_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_FIELD_NUMBER: _ClassVar[int]
        LIFE_RESULT_FIELD_NUMBER: _ClassVar[int]
        LOW_FPS_FIELD_NUMBER: _ClassVar[int]
        MAX_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        MISS_NUM_FIELD_NUMBER: _ClassVar[int]
        MISS_TIME_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        MV_FLAG_FIELD_NUMBER: _ClassVar[int]
        NEW_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_P_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        NOTES_FIELD_NUMBER: _ClassVar[int]
        NOTES_SIZE_OPTION_FIELD_NUMBER: _ClassVar[int]
        ORIGINAL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        PRIVATE_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        RANK_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        REHEARSAL_FLAG_FIELD_NUMBER: _ClassVar[int]
        REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        RESULT_FIELD_NUMBER: _ClassVar[int]
        RETRY_LIFE_FIELD_NUMBER: _ClassVar[int]
        RETRY_SELF_FIELD_NUMBER: _ClassVar[int]
        SCORE_FIELD_NUMBER: _ClassVar[int]
        SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        SCORE_TARGET_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SKIP_TICKET_NUM_FIELD_NUMBER: _ClassVar[int]
        SPELL_BREAK_FLAG_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_ID_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        START_T_FIELD_NUMBER: _ClassVar[int]
        TOTAL_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        TTL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_FLAG_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill: int
        active_skill_id: str
        active_skill_t: float
        af_high_score_rate: int
        af_nakayoshi_lv: int
        af_nakayoshi_pt: int
        auto_active_flag: int
        auto_mode_flag: int
        ave_fps: int
        best_defeat_time: int
        bf_high_score_rate: int
        bomb_num: int
        bomb_time: str
        boost_ratio: int
        boost_reward_ratio: int
        boss_atack_option: int
        boss_damage: int
        boss_hp: int
        boss_id: int
        boss_target: int
        burst_skill: int
        burst_skill_id: str
        burst_skill_t: float
        card_id: str
        card_level: str
        clear_danmaku: int
        combo_num: int
        combo_target: int
        common: EventSchema.Common
        continue_num: int
        daily_bonus_flag: int
        danmaku_flag: int
        danmaku_id: int
        deck_id: int
        defeat_time: int
        detailed_combo: str
        detailed_notes: str
        detailed_score_adjust: str
        detailed_score_base: str
        detailed_score_up_bonus: str
        difficulty: int
        dream_point: int
        drop_item_id: str
        drop_item_num: str
        event_bonus_point: int
        event_id: int
        event_point_id: int
        full_combo_flag: int
        gage_bonus: int
        get_card_exp: int
        get_event_point: int
        get_nakayoshi_pt: int
        get_point_charm: int
        get_power_charm: int
        get_user_exp: int
        heroine_id: str
        heroine_lv: str
        high_score: int
        life_result: int
        low_fps: int
        max_damage: int
        miss_num: int
        miss_time: str
        music_id: int
        mv_flag: int
        new_full_combo: int
        new_p_full_combo: int
        new_score_rank: int
        notes: str
        notes_size_option: int
        original_event_point: int
        passive_skill: int
        passive_skill_id: str
        passive_skill_t: float
        private_score_ranking: int
        rank_bonus_point: int
        rehearsal_flag: int
        remaint_boost: int
        result: int
        retry_life: int
        retry_self: int
        score: int
        score_rank: int
        score_target: int
        session_id: str
        skip_ticket_num: int
        spell_break_flag: int
        spell_card_id: int
        spell_card_place_id: int
        start_t: int
        total_score_ranking: int
        ttl_event_point: int
        unlock_bgm_flag: int
        unlock_bgm_id: int
        use_boost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., music_id: _Optional[int] = ..., mv_flag: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., skip_ticket_num: _Optional[int] = ..., rehearsal_flag: _Optional[int] = ..., spell_break_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., life_result: _Optional[int] = ..., start_t: _Optional[int] = ..., deck_id: _Optional[int] = ..., score: _Optional[int] = ..., high_score: _Optional[int] = ..., bf_high_score_rate: _Optional[int] = ..., af_high_score_rate: _Optional[int] = ..., private_score_ranking: _Optional[int] = ..., total_score_ranking: _Optional[int] = ..., score_rank: _Optional[int] = ..., new_score_rank: _Optional[int] = ..., combo_num: _Optional[int] = ..., full_combo_flag: _Optional[int] = ..., new_full_combo: _Optional[int] = ..., new_p_full_combo: _Optional[int] = ..., auto_active_flag: _Optional[int] = ..., active_skill: _Optional[int] = ..., active_skill_t: _Optional[float] = ..., active_skill_id: _Optional[str] = ..., passive_skill: _Optional[int] = ..., passive_skill_t: _Optional[float] = ..., passive_skill_id: _Optional[str] = ..., spell_card_id: _Optional[int] = ..., spell_card_place_id: _Optional[int] = ..., boss_id: _Optional[int] = ..., boss_hp: _Optional[int] = ..., boss_damage: _Optional[int] = ..., max_damage: _Optional[int] = ..., defeat_time: _Optional[int] = ..., best_defeat_time: _Optional[int] = ..., get_user_exp: _Optional[int] = ..., drop_item_id: _Optional[str] = ..., drop_item_num: _Optional[str] = ..., ave_fps: _Optional[int] = ..., low_fps: _Optional[int] = ..., boost_reward_ratio: _Optional[int] = ..., dream_point: _Optional[int] = ..., card_id: _Optional[str] = ..., get_card_exp: _Optional[int] = ..., card_level: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., get_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_lv: _Optional[int] = ..., notes: _Optional[str] = ..., score_target: _Optional[int] = ..., combo_target: _Optional[int] = ..., boss_target: _Optional[int] = ..., daily_bonus_flag: _Optional[int] = ..., danmaku_flag: _Optional[int] = ..., danmaku_id: _Optional[int] = ..., get_point_charm: _Optional[int] = ..., get_power_charm: _Optional[int] = ..., miss_num: _Optional[int] = ..., miss_time: _Optional[str] = ..., bomb_num: _Optional[int] = ..., bomb_time: _Optional[str] = ..., clear_danmaku: _Optional[int] = ..., boost_ratio: _Optional[int] = ..., remaint_boost: _Optional[int] = ..., use_boost: _Optional[int] = ..., event_id: _Optional[int] = ..., event_point_id: _Optional[int] = ..., get_event_point: _Optional[int] = ..., original_event_point: _Optional[int] = ..., rank_bonus_point: _Optional[int] = ..., event_bonus_point: _Optional[int] = ..., gage_bonus: _Optional[int] = ..., ttl_event_point: _Optional[int] = ..., result: _Optional[int] = ..., continue_num: _Optional[int] = ..., retry_self: _Optional[int] = ..., retry_life: _Optional[int] = ..., detailed_notes: _Optional[str] = ..., boss_atack_option: _Optional[int] = ..., notes_size_option: _Optional[int] = ..., detailed_score_base: _Optional[str] = ..., detailed_combo: _Optional[str] = ..., detailed_score_up_bonus: _Optional[str] = ..., detailed_score_adjust: _Optional[str] = ..., unlock_bgm_flag: _Optional[int] = ..., unlock_bgm_id: _Optional[int] = ..., burst_skill: _Optional[int] = ..., burst_skill_t: _Optional[float] = ..., burst_skill_id: _Optional[str] = ..., **kwargs) -> None: ...
    class ChallengeStageStart(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill_id", "active_skill_level", "attribute", "auto_mode_flag", "bf_nakayoshi_lv", "bf_nakayoshi_pt", "bluetooth_flag", "bonus_music_flag", "boss_effect_flag", "burst_skill_id", "burst_skill_level", "card_deepen", "card_flowering", "card_id", "card_level", "card_para_total", "card_rarity", "card_skill_level", "card_type_id", "common", "deck_id", "difficulty", "event_id", "expected_score_rank", "first_difficulty_flag", "first_music_flag", "flowering_lv_bonus", "heroine_bonus", "heroine_id", "heroine_lv", "heroine_skill", "heroine_skill_bonus", "mode", "music_id", "notes_speed", "notes_timing", "para_total", "passive_skill_boost", "passive_skill_id", "passive_skill_level", "rhythm_effect_flag", "session_id", "total_para_co", "total_para_em", "total_para_life", "total_para_ro", "total_para_shot", "type_fit_bonus", "vibration_flag"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        ATTRIBUTE_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        BLUETOOTH_FLAG_FIELD_NUMBER: _ClassVar[int]
        BONUS_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        BOSS_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        CARD_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        CARD_RARITY_FIELD_NUMBER: _ClassVar[int]
        CARD_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EXPECTED_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        FIRST_DIFFICULTY_FLAG_FIELD_NUMBER: _ClassVar[int]
        FIRST_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_LV_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_FIELD_NUMBER: _ClassVar[int]
        MODE_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        NOTES_SPEED_FIELD_NUMBER: _ClassVar[int]
        NOTES_TIMING_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_BOOST_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        RHYTHM_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_LIFE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_SHOT_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIT_BONUS_FIELD_NUMBER: _ClassVar[int]
        VIBRATION_FLAG_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill_id: str
        active_skill_level: str
        attribute: int
        auto_mode_flag: int
        bf_nakayoshi_lv: int
        bf_nakayoshi_pt: int
        bluetooth_flag: int
        bonus_music_flag: int
        boss_effect_flag: int
        burst_skill_id: str
        burst_skill_level: str
        card_deepen: str
        card_flowering: str
        card_id: str
        card_level: str
        card_para_total: int
        card_rarity: str
        card_skill_level: str
        card_type_id: str
        common: EventSchema.Common
        deck_id: int
        difficulty: int
        event_id: int
        expected_score_rank: int
        first_difficulty_flag: int
        first_music_flag: int
        flowering_lv_bonus: int
        heroine_bonus: int
        heroine_id: str
        heroine_lv: str
        heroine_skill: str
        heroine_skill_bonus: int
        mode: int
        music_id: int
        notes_speed: int
        notes_timing: int
        para_total: int
        passive_skill_boost: str
        passive_skill_id: str
        passive_skill_level: str
        rhythm_effect_flag: int
        session_id: str
        total_para_co: int
        total_para_em: int
        total_para_life: int
        total_para_ro: int
        total_para_shot: int
        type_fit_bonus: int
        vibration_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., notes_speed: _Optional[int] = ..., notes_timing: _Optional[int] = ..., vibration_flag: _Optional[int] = ..., bluetooth_flag: _Optional[int] = ..., music_id: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., first_music_flag: _Optional[int] = ..., first_difficulty_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., mode: _Optional[int] = ..., attribute: _Optional[int] = ..., boss_effect_flag: _Optional[int] = ..., rhythm_effect_flag: _Optional[int] = ..., deck_id: _Optional[int] = ..., card_id: _Optional[str] = ..., card_type_id: _Optional[str] = ..., card_level: _Optional[str] = ..., card_skill_level: _Optional[str] = ..., active_skill_id: _Optional[str] = ..., passive_skill_id: _Optional[str] = ..., card_rarity: _Optional[str] = ..., card_flowering: _Optional[str] = ..., card_deepen: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., heroine_skill: _Optional[str] = ..., bf_nakayoshi_pt: _Optional[int] = ..., bf_nakayoshi_lv: _Optional[int] = ..., total_para_life: _Optional[int] = ..., total_para_shot: _Optional[int] = ..., para_total: _Optional[int] = ..., total_para_em: _Optional[int] = ..., total_para_co: _Optional[int] = ..., total_para_ro: _Optional[int] = ..., card_para_total: _Optional[int] = ..., flowering_lv_bonus: _Optional[int] = ..., type_fit_bonus: _Optional[int] = ..., heroine_bonus: _Optional[int] = ..., heroine_skill_bonus: _Optional[int] = ..., expected_score_rank: _Optional[int] = ..., event_id: _Optional[int] = ..., bonus_music_flag: _Optional[int] = ..., passive_skill_boost: _Optional[str] = ..., burst_skill_id: _Optional[str] = ..., active_skill_level: _Optional[str] = ..., passive_skill_level: _Optional[str] = ..., burst_skill_level: _Optional[str] = ...) -> None: ...
    class ChangeComment(_message.Message):
        __slots__ = ["af_comment", "bf_comment", "common"]
        AF_COMMENT_FIELD_NUMBER: _ClassVar[int]
        BF_COMMENT_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        af_comment: str
        bf_comment: str
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_comment: _Optional[str] = ..., af_comment: _Optional[str] = ...) -> None: ...
    class ChangeCostume(_message.Message):
        __slots__ = ["after_costume", "befor_costume", "char_id", "common"]
        AFTER_COSTUME_FIELD_NUMBER: _ClassVar[int]
        BEFOR_COSTUME_FIELD_NUMBER: _ClassVar[int]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        after_costume: int
        befor_costume: int
        char_id: str
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., char_id: _Optional[str] = ..., befor_costume: _Optional[int] = ..., after_costume: _Optional[int] = ...) -> None: ...
    class ClubChangePosition(_message.Message):
        __slots__ = ["af_position_id", "bf_position_id", "change_type", "club_id", "club_name", "common"]
        AF_POSITION_ID_FIELD_NUMBER: _ClassVar[int]
        BF_POSITION_ID_FIELD_NUMBER: _ClassVar[int]
        CHANGE_TYPE_FIELD_NUMBER: _ClassVar[int]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        af_position_id: int
        bf_position_id: int
        change_type: int
        club_id: str
        club_name: str
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., change_type: _Optional[int] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ..., bf_position_id: _Optional[int] = ..., af_position_id: _Optional[int] = ...) -> None: ...
    class ClubChat(_message.Message):
        __slots__ = ["club_id", "club_name", "comment", "common", "position_id"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMENT_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        POSITION_ID_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        club_name: str
        comment: str
        common: EventSchema.Common
        position_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., comment: _Optional[str] = ..., position_id: _Optional[int] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ...) -> None: ...
    class ClubChatOption(_message.Message):
        __slots__ = ["chat_option_flag", "club_id", "club_name", "common", "deepen_flag", "enhance_flag", "flowering_flag", "ssr_flag"]
        CHAT_OPTION_FLAG_FIELD_NUMBER: _ClassVar[int]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DEEPEN_FLAG_FIELD_NUMBER: _ClassVar[int]
        ENHANCE_FLAG_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_FLAG_FIELD_NUMBER: _ClassVar[int]
        SSR_FLAG_FIELD_NUMBER: _ClassVar[int]
        chat_option_flag: int
        club_id: str
        club_name: str
        common: EventSchema.Common
        deepen_flag: int
        enhance_flag: int
        flowering_flag: int
        ssr_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., chat_option_flag: _Optional[int] = ..., ssr_flag: _Optional[int] = ..., enhance_flag: _Optional[int] = ..., flowering_flag: _Optional[int] = ..., deepen_flag: _Optional[int] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ...) -> None: ...
    class ClubCreate(_message.Message):
        __slots__ = ["attend", "club_id", "club_name", "common", "flowering_flag", "icon_id", "item_id", "item_num", "premiere_flag", "profile", "style"]
        ATTEND_FIELD_NUMBER: _ClassVar[int]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_FLAG_FIELD_NUMBER: _ClassVar[int]
        ICON_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        PREMIERE_FLAG_FIELD_NUMBER: _ClassVar[int]
        PROFILE_FIELD_NUMBER: _ClassVar[int]
        STYLE_FIELD_NUMBER: _ClassVar[int]
        attend: int
        club_id: str
        club_name: str
        common: EventSchema.Common
        flowering_flag: int
        icon_id: int
        item_id: str
        item_num: str
        premiere_flag: int
        profile: str
        style: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ..., icon_id: _Optional[int] = ..., flowering_flag: _Optional[int] = ..., premiere_flag: _Optional[int] = ..., style: _Optional[int] = ..., attend: _Optional[int] = ..., profile: _Optional[str] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ...) -> None: ...
    class ClubInfoChange(_message.Message):
        __slots__ = ["af_attend", "af_emblem1", "af_emblem2", "af_profile", "af_style", "bf_attend", "bf_emblem1", "bf_emblem2", "bf_profile", "bf_style", "club_id", "club_name", "common"]
        AF_ATTEND_FIELD_NUMBER: _ClassVar[int]
        AF_EMBLEM1_FIELD_NUMBER: _ClassVar[int]
        AF_EMBLEM2_FIELD_NUMBER: _ClassVar[int]
        AF_PROFILE_FIELD_NUMBER: _ClassVar[int]
        AF_STYLE_FIELD_NUMBER: _ClassVar[int]
        BF_ATTEND_FIELD_NUMBER: _ClassVar[int]
        BF_EMBLEM1_FIELD_NUMBER: _ClassVar[int]
        BF_EMBLEM2_FIELD_NUMBER: _ClassVar[int]
        BF_PROFILE_FIELD_NUMBER: _ClassVar[int]
        BF_STYLE_FIELD_NUMBER: _ClassVar[int]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        af_attend: int
        af_emblem1: int
        af_emblem2: int
        af_profile: str
        af_style: int
        bf_attend: int
        bf_emblem1: int
        bf_emblem2: int
        bf_profile: str
        bf_style: int
        club_id: str
        club_name: str
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_style: _Optional[int] = ..., af_style: _Optional[int] = ..., bf_attend: _Optional[int] = ..., af_attend: _Optional[int] = ..., bf_profile: _Optional[str] = ..., af_profile: _Optional[str] = ..., bf_emblem1: _Optional[int] = ..., af_emblem1: _Optional[int] = ..., bf_emblem2: _Optional[int] = ..., af_emblem2: _Optional[int] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ...) -> None: ...
    class ClubMemberChange(_message.Message):
        __slots__ = ["club_id", "club_name", "club_num", "common", "disband_flag", "leader_id", "member_num", "type"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        CLUB_NUM_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DISBAND_FLAG_FIELD_NUMBER: _ClassVar[int]
        LEADER_ID_FIELD_NUMBER: _ClassVar[int]
        MEMBER_NUM_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        club_name: str
        club_num: int
        common: EventSchema.Common
        disband_flag: int
        leader_id: str
        member_num: int
        type: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., type: _Optional[int] = ..., leader_id: _Optional[str] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ..., member_num: _Optional[int] = ..., club_num: _Optional[int] = ..., disband_flag: _Optional[int] = ...) -> None: ...
    class ClubMemberManagement(_message.Message):
        __slots__ = ["club_id", "club_name", "common", "manage_type", "member_id", "position_id"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        MANAGE_TYPE_FIELD_NUMBER: _ClassVar[int]
        MEMBER_ID_FIELD_NUMBER: _ClassVar[int]
        POSITION_ID_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        club_name: str
        common: EventSchema.Common
        manage_type: int
        member_id: str
        position_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., member_id: _Optional[str] = ..., manage_type: _Optional[int] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ..., position_id: _Optional[int] = ...) -> None: ...
    class ClubOptionChange(_message.Message):
        __slots__ = ["club_id", "club_name", "common", "deepen_flag", "enhance_flag", "flowering_flag", "search_flag", "ssr_flag"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DEEPEN_FLAG_FIELD_NUMBER: _ClassVar[int]
        ENHANCE_FLAG_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_FLAG_FIELD_NUMBER: _ClassVar[int]
        SEARCH_FLAG_FIELD_NUMBER: _ClassVar[int]
        SSR_FLAG_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        club_name: str
        common: EventSchema.Common
        deepen_flag: int
        enhance_flag: int
        flowering_flag: int
        search_flag: int
        ssr_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ..., search_flag: _Optional[int] = ..., ssr_flag: _Optional[int] = ..., enhance_flag: _Optional[int] = ..., flowering_flag: _Optional[int] = ..., deepen_flag: _Optional[int] = ...) -> None: ...
    class ClubSlotOpen(_message.Message):
        __slots__ = ["common", "item_id", "item_num", "open_slot"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        OPEN_SLOT_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        item_id: str
        item_num: str
        open_slot: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ..., open_slot: _Optional[int] = ...) -> None: ...
    class ClubSpaceDelete(_message.Message):
        __slots__ = ["club_id", "club_set_name", "club_set_num", "club_set_owner", "common", "coordinate_id", "object_symbol_id", "theme_id", "use_cost"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_SET_NAME_FIELD_NUMBER: _ClassVar[int]
        CLUB_SET_NUM_FIELD_NUMBER: _ClassVar[int]
        CLUB_SET_OWNER_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        OBJECT_SYMBOL_ID_FIELD_NUMBER: _ClassVar[int]
        THEME_ID_FIELD_NUMBER: _ClassVar[int]
        USE_COST_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        club_set_name: str
        club_set_num: int
        club_set_owner: str
        common: EventSchema.Common
        coordinate_id: str
        object_symbol_id: str
        theme_id: int
        use_cost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., club_id: _Optional[str] = ..., club_set_owner: _Optional[str] = ..., object_symbol_id: _Optional[str] = ..., coordinate_id: _Optional[str] = ..., use_cost: _Optional[int] = ..., theme_id: _Optional[int] = ..., club_set_num: _Optional[int] = ..., club_set_name: _Optional[str] = ...) -> None: ...
    class ClubSpaceEdit(_message.Message):
        __slots__ = ["club_id", "common", "coordinate_id", "object_symbol_id", "theme_id", "use_cost"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        OBJECT_SYMBOL_ID_FIELD_NUMBER: _ClassVar[int]
        THEME_ID_FIELD_NUMBER: _ClassVar[int]
        USE_COST_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        common: EventSchema.Common
        coordinate_id: str
        object_symbol_id: str
        theme_id: int
        use_cost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., club_id: _Optional[str] = ..., object_symbol_id: _Optional[str] = ..., coordinate_id: _Optional[str] = ..., use_cost: _Optional[int] = ..., theme_id: _Optional[int] = ...) -> None: ...
    class ClubSpaceSet(_message.Message):
        __slots__ = ["club_id", "club_set_name", "club_set_num", "common", "coordinate_id", "object_symbol_id", "theme_id", "use_cost"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_SET_NAME_FIELD_NUMBER: _ClassVar[int]
        CLUB_SET_NUM_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        OBJECT_SYMBOL_ID_FIELD_NUMBER: _ClassVar[int]
        THEME_ID_FIELD_NUMBER: _ClassVar[int]
        USE_COST_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        club_set_name: str
        club_set_num: int
        common: EventSchema.Common
        coordinate_id: str
        object_symbol_id: str
        theme_id: int
        use_cost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., club_id: _Optional[str] = ..., object_symbol_id: _Optional[str] = ..., coordinate_id: _Optional[str] = ..., use_cost: _Optional[int] = ..., theme_id: _Optional[int] = ..., club_set_num: _Optional[int] = ..., club_set_name: _Optional[str] = ...) -> None: ...
    class ClubStamp(_message.Message):
        __slots__ = ["club_id", "club_name", "common", "position_id", "stamp_id"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        POSITION_ID_FIELD_NUMBER: _ClassVar[int]
        STAMP_ID_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        club_name: str
        common: EventSchema.Common
        position_id: int
        stamp_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., stamp_id: _Optional[int] = ..., position_id: _Optional[int] = ..., club_name: _Optional[str] = ..., club_id: _Optional[str] = ...) -> None: ...
    class Common(_message.Message):
        __slots__ = ["active_skill_limit", "boost", "boost_limit", "card_limit", "client_time", "club_id", "d", "defeat_boss_music", "elapsed_date", "emblem1", "emblem2", "emblem_num", "flowering_bonus", "follow_num", "follower_num", "gacha_ticket_id", "gacha_ticket_num", "gm_pn_option", "gold_pass", "has_card_info", "heroine_limit", "heroine_piece", "high_score_rate", "kagura_tier", "monthly_pass", "monthly_pass_end", "night_pn_option", "num_dream", "num_free_crystal", "num_paid_crystal", "odekake_limit", "platinum_pass", "player_name", "pn_option", "read_episode", "reconstruct_complete", "reg_date", "repair_complete", "sapling_step", "skip_ticket", "space_total_like", "takasho_player_id", "takasho_player_short_id", "total_flowering_lv", "user_rank"]
        ACTIVE_SKILL_LIMIT_FIELD_NUMBER: _ClassVar[int]
        BOOST_FIELD_NUMBER: _ClassVar[int]
        BOOST_LIMIT_FIELD_NUMBER: _ClassVar[int]
        CARD_LIMIT_FIELD_NUMBER: _ClassVar[int]
        CLIENT_TIME_FIELD_NUMBER: _ClassVar[int]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        DEFEAT_BOSS_MUSIC_FIELD_NUMBER: _ClassVar[int]
        D_FIELD_NUMBER: _ClassVar[int]
        ELAPSED_DATE_FIELD_NUMBER: _ClassVar[int]
        EMBLEM1_FIELD_NUMBER: _ClassVar[int]
        EMBLEM2_FIELD_NUMBER: _ClassVar[int]
        EMBLEM_NUM_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_BONUS_FIELD_NUMBER: _ClassVar[int]
        FOLLOWER_NUM_FIELD_NUMBER: _ClassVar[int]
        FOLLOW_NUM_FIELD_NUMBER: _ClassVar[int]
        GACHA_TICKET_ID_FIELD_NUMBER: _ClassVar[int]
        GACHA_TICKET_NUM_FIELD_NUMBER: _ClassVar[int]
        GM_PN_OPTION_FIELD_NUMBER: _ClassVar[int]
        GOLD_PASS_FIELD_NUMBER: _ClassVar[int]
        HAS_CARD_INFO_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LIMIT_FIELD_NUMBER: _ClassVar[int]
        HEROINE_PIECE_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        KAGURA_TIER_FIELD_NUMBER: _ClassVar[int]
        MONTHLY_PASS_END_FIELD_NUMBER: _ClassVar[int]
        MONTHLY_PASS_FIELD_NUMBER: _ClassVar[int]
        NIGHT_PN_OPTION_FIELD_NUMBER: _ClassVar[int]
        NUM_DREAM_FIELD_NUMBER: _ClassVar[int]
        NUM_FREE_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        NUM_PAID_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_LIMIT_FIELD_NUMBER: _ClassVar[int]
        PLATINUM_PASS_FIELD_NUMBER: _ClassVar[int]
        PLAYER_NAME_FIELD_NUMBER: _ClassVar[int]
        PN_OPTION_FIELD_NUMBER: _ClassVar[int]
        READ_EPISODE_FIELD_NUMBER: _ClassVar[int]
        RECONSTRUCT_COMPLETE_FIELD_NUMBER: _ClassVar[int]
        REG_DATE_FIELD_NUMBER: _ClassVar[int]
        REPAIR_COMPLETE_FIELD_NUMBER: _ClassVar[int]
        SAPLING_STEP_FIELD_NUMBER: _ClassVar[int]
        SKIP_TICKET_FIELD_NUMBER: _ClassVar[int]
        SPACE_TOTAL_LIKE_FIELD_NUMBER: _ClassVar[int]
        TAKASHO_PLAYER_ID_FIELD_NUMBER: _ClassVar[int]
        TAKASHO_PLAYER_SHORT_ID_FIELD_NUMBER: _ClassVar[int]
        TOTAL_FLOWERING_LV_FIELD_NUMBER: _ClassVar[int]
        USER_RANK_FIELD_NUMBER: _ClassVar[int]
        active_skill_limit: int
        boost: int
        boost_limit: int
        card_limit: int
        client_time: str
        club_id: str
        d: str
        defeat_boss_music: int
        elapsed_date: int
        emblem1: int
        emblem2: int
        emblem_num: int
        flowering_bonus: float
        follow_num: int
        follower_num: int
        gacha_ticket_id: str
        gacha_ticket_num: str
        gm_pn_option: int
        gold_pass: str
        has_card_info: str
        heroine_limit: int
        heroine_piece: int
        high_score_rate: int
        kagura_tier: int
        monthly_pass: int
        monthly_pass_end: str
        night_pn_option: int
        num_dream: int
        num_free_crystal: int
        num_paid_crystal: int
        odekake_limit: int
        platinum_pass: str
        player_name: str
        pn_option: int
        read_episode: int
        reconstruct_complete: int
        reg_date: str
        repair_complete: int
        sapling_step: int
        skip_ticket: int
        space_total_like: int
        takasho_player_id: str
        takasho_player_short_id: str
        total_flowering_lv: int
        user_rank: int
        def __init__(self, d: _Optional[str] = ..., client_time: _Optional[str] = ..., user_rank: _Optional[int] = ..., num_dream: _Optional[int] = ..., kagura_tier: _Optional[int] = ..., gold_pass: _Optional[str] = ..., platinum_pass: _Optional[str] = ..., monthly_pass: _Optional[int] = ..., monthly_pass_end: _Optional[str] = ..., boost: _Optional[int] = ..., boost_limit: _Optional[int] = ..., has_card_info: _Optional[str] = ..., high_score_rate: _Optional[int] = ..., defeat_boss_music: _Optional[int] = ..., card_limit: _Optional[int] = ..., heroine_limit: _Optional[int] = ..., odekake_limit: _Optional[int] = ..., active_skill_limit: _Optional[int] = ..., skip_ticket: _Optional[int] = ..., read_episode: _Optional[int] = ..., reconstruct_complete: _Optional[int] = ..., heroine_piece: _Optional[int] = ..., flowering_bonus: _Optional[float] = ..., total_flowering_lv: _Optional[int] = ..., club_id: _Optional[str] = ..., emblem1: _Optional[int] = ..., emblem2: _Optional[int] = ..., emblem_num: _Optional[int] = ..., follow_num: _Optional[int] = ..., follower_num: _Optional[int] = ..., space_total_like: _Optional[int] = ..., sapling_step: _Optional[int] = ..., player_name: _Optional[str] = ..., reg_date: _Optional[str] = ..., pn_option: _Optional[int] = ..., night_pn_option: _Optional[int] = ..., gm_pn_option: _Optional[int] = ..., num_free_crystal: _Optional[int] = ..., num_paid_crystal: _Optional[int] = ..., elapsed_date: _Optional[int] = ..., takasho_player_id: _Optional[str] = ..., takasho_player_short_id: _Optional[str] = ..., gacha_ticket_id: _Optional[str] = ..., gacha_ticket_num: _Optional[str] = ..., repair_complete: _Optional[int] = ...) -> None: ...
    class ConsumeVc(_message.Message):
        __slots__ = ["common"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ...) -> None: ...
    class ConsumeVcServerPayload(_message.Message):
        __slots__ = ["id", "num_free_crystal", "num_paid_crystal"]
        ID_FIELD_NUMBER: _ClassVar[int]
        NUM_FREE_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        NUM_PAID_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        id: str
        num_free_crystal: int
        num_paid_crystal: int
        def __init__(self, id: _Optional[str] = ..., num_free_crystal: _Optional[int] = ..., num_paid_crystal: _Optional[int] = ...) -> None: ...
    class DailyBonus(_message.Message):
        __slots__ = ["bonus_times", "common", "item_id", "item_num", "item_set_id", "odekake_session_id", "session_id"]
        BONUS_TIMES_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        ITEM_SET_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        bonus_times: int
        common: EventSchema.Common
        item_id: str
        item_num: str
        item_set_id: int
        odekake_session_id: str
        session_id: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ..., bonus_times: _Optional[int] = ..., item_set_id: _Optional[int] = ..., session_id: _Optional[str] = ..., odekake_session_id: _Optional[str] = ...) -> None: ...
    class DeckCh(_message.Message):
        __slots__ = ["active_skill_id", "active_skill_level", "af_card", "af_card_instance", "af_heroine1", "af_heroine1_instance", "af_heroine2", "af_heroine2_instance", "bf_card", "bf_heroine1", "bf_heroine2", "burst_skill_id", "burst_skill_level", "card_deepen", "card_flowering", "card_main_level", "card_para_co", "card_para_em", "card_para_ro", "card_para_total", "card_rarity", "card_skill_level", "card_type_id", "common", "deck_id", "deck_name", "deck_slot", "event_bonus_ratio", "event_id", "flowering_flag", "heroine1_co_ratio", "heroine1_em_ratio", "heroine1_heroine_skill_id", "heroine1_life", "heroine1_lv", "heroine1_origin_co_ratio", "heroine1_origin_em_ratio", "heroine1_origin_life", "heroine1_origin_ro_ratio", "heroine1_origin_shot", "heroine1_ro_ratio", "heroine1_shot", "heroine2_co_ratio", "heroine2_em_ratio", "heroine2_heroine_skill_id", "heroine2_life", "heroine2_lv", "heroine2_origin_co_ratio", "heroine2_origin_em_ratio", "heroine2_origin_life", "heroine2_origin_ro_ratio", "heroine2_origin_shot", "heroine2_ro_ratio", "heroine2_shot", "nakayoshi_lv", "nakayoshi_pt", "odekake_skill_id", "odekake_skill_lv", "para_total", "passive_skill_id", "passive_skill_level", "premiere_flag", "suggestion", "suggestion_card", "suggestion_heroine", "suggestion_skill", "suggestion_type", "total_para_co", "total_para_em", "total_para_ro"]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        AF_CARD_FIELD_NUMBER: _ClassVar[int]
        AF_CARD_INSTANCE_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE1_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE1_INSTANCE_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE2_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE2_INSTANCE_FIELD_NUMBER: _ClassVar[int]
        BF_CARD_FIELD_NUMBER: _ClassVar[int]
        BF_HEROINE1_FIELD_NUMBER: _ClassVar[int]
        BF_HEROINE2_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        CARD_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        CARD_MAIN_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        CARD_RARITY_FIELD_NUMBER: _ClassVar[int]
        CARD_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DECK_NAME_FIELD_NUMBER: _ClassVar[int]
        DECK_SLOT_FIELD_NUMBER: _ClassVar[int]
        EVENT_BONUS_RATIO_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_FLAG_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_CO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_EM_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_HEROINE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_LIFE_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_CO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_EM_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_LIFE_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_RO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_SHOT_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_RO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_SHOT_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_CO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_EM_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_HEROINE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_LIFE_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_CO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_EM_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_LIFE_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_RO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_SHOT_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_RO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_SHOT_FIELD_NUMBER: _ClassVar[int]
        NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SKILL_LV_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        PREMIERE_FLAG_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_CARD_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_HEROINE_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_SKILL_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_TYPE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        active_skill_id: str
        active_skill_level: str
        af_card: str
        af_card_instance: str
        af_heroine1: int
        af_heroine1_instance: int
        af_heroine2: int
        af_heroine2_instance: int
        bf_card: str
        bf_heroine1: int
        bf_heroine2: int
        burst_skill_id: str
        burst_skill_level: str
        card_deepen: str
        card_flowering: str
        card_main_level: str
        card_para_co: int
        card_para_em: int
        card_para_ro: int
        card_para_total: int
        card_rarity: str
        card_skill_level: str
        card_type_id: str
        common: EventSchema.Common
        deck_id: int
        deck_name: str
        deck_slot: int
        event_bonus_ratio: float
        event_id: int
        flowering_flag: str
        heroine1_co_ratio: float
        heroine1_em_ratio: float
        heroine1_heroine_skill_id: int
        heroine1_life: int
        heroine1_lv: int
        heroine1_origin_co_ratio: float
        heroine1_origin_em_ratio: float
        heroine1_origin_life: int
        heroine1_origin_ro_ratio: float
        heroine1_origin_shot: int
        heroine1_ro_ratio: float
        heroine1_shot: int
        heroine2_co_ratio: float
        heroine2_em_ratio: float
        heroine2_heroine_skill_id: int
        heroine2_life: int
        heroine2_lv: int
        heroine2_origin_co_ratio: float
        heroine2_origin_em_ratio: float
        heroine2_origin_life: int
        heroine2_origin_ro_ratio: float
        heroine2_origin_shot: int
        heroine2_ro_ratio: float
        heroine2_shot: int
        nakayoshi_lv: int
        nakayoshi_pt: int
        odekake_skill_id: str
        odekake_skill_lv: str
        para_total: int
        passive_skill_id: str
        passive_skill_level: str
        premiere_flag: str
        suggestion: int
        suggestion_card: int
        suggestion_heroine: int
        suggestion_skill: int
        suggestion_type: int
        total_para_co: int
        total_para_em: int
        total_para_ro: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_card: _Optional[str] = ..., af_card: _Optional[str] = ..., af_card_instance: _Optional[str] = ..., card_rarity: _Optional[str] = ..., card_type_id: _Optional[str] = ..., card_main_level: _Optional[str] = ..., card_skill_level: _Optional[str] = ..., active_skill_id: _Optional[str] = ..., passive_skill_id: _Optional[str] = ..., odekake_skill_id: _Optional[str] = ..., card_flowering: _Optional[str] = ..., card_deepen: _Optional[str] = ..., flowering_flag: _Optional[str] = ..., premiere_flag: _Optional[str] = ..., bf_heroine1: _Optional[int] = ..., af_heroine1: _Optional[int] = ..., bf_heroine2: _Optional[int] = ..., af_heroine2: _Optional[int] = ..., af_heroine1_instance: _Optional[int] = ..., af_heroine2_instance: _Optional[int] = ..., heroine1_life: _Optional[int] = ..., heroine2_life: _Optional[int] = ..., heroine1_shot: _Optional[int] = ..., heroine2_shot: _Optional[int] = ..., heroine1_lv: _Optional[int] = ..., heroine2_lv: _Optional[int] = ..., heroine1_heroine_skill_id: _Optional[int] = ..., heroine2_heroine_skill_id: _Optional[int] = ..., heroine1_em_ratio: _Optional[float] = ..., heroine2_em_ratio: _Optional[float] = ..., heroine1_co_ratio: _Optional[float] = ..., heroine2_co_ratio: _Optional[float] = ..., heroine1_ro_ratio: _Optional[float] = ..., heroine2_ro_ratio: _Optional[float] = ..., heroine1_origin_life: _Optional[int] = ..., heroine2_origin_life: _Optional[int] = ..., heroine1_origin_shot: _Optional[int] = ..., heroine2_origin_shot: _Optional[int] = ..., heroine1_origin_em_ratio: _Optional[float] = ..., heroine2_origin_em_ratio: _Optional[float] = ..., heroine1_origin_co_ratio: _Optional[float] = ..., heroine2_origin_co_ratio: _Optional[float] = ..., heroine1_origin_ro_ratio: _Optional[float] = ..., heroine2_origin_ro_ratio: _Optional[float] = ..., nakayoshi_pt: _Optional[int] = ..., nakayoshi_lv: _Optional[int] = ..., card_para_total: _Optional[int] = ..., card_para_em: _Optional[int] = ..., card_para_co: _Optional[int] = ..., card_para_ro: _Optional[int] = ..., para_total: _Optional[int] = ..., total_para_em: _Optional[int] = ..., total_para_co: _Optional[int] = ..., total_para_ro: _Optional[int] = ..., event_id: _Optional[int] = ..., event_bonus_ratio: _Optional[float] = ..., deck_id: _Optional[int] = ..., deck_slot: _Optional[int] = ..., deck_name: _Optional[str] = ..., suggestion: _Optional[int] = ..., suggestion_type: _Optional[int] = ..., suggestion_heroine: _Optional[int] = ..., suggestion_card: _Optional[int] = ..., suggestion_skill: _Optional[int] = ..., burst_skill_id: _Optional[str] = ..., active_skill_level: _Optional[str] = ..., passive_skill_level: _Optional[str] = ..., burst_skill_level: _Optional[str] = ..., odekake_skill_lv: _Optional[str] = ...) -> None: ...
    class DialogueSetting(_message.Message):
        __slots__ = ["battery_flag", "common", "danmaku_boost_flag", "odekake_boost_flag"]
        BATTERY_FLAG_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_BOOST_FLAG_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_BOOST_FLAG_FIELD_NUMBER: _ClassVar[int]
        battery_flag: int
        common: EventSchema.Common
        danmaku_boost_flag: int
        odekake_boost_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., danmaku_boost_flag: _Optional[int] = ..., odekake_boost_flag: _Optional[int] = ..., battery_flag: _Optional[int] = ...) -> None: ...
    class DisplaySetting(_message.Message):
        __slots__ = ["common", "hakoniwa_flag", "hold"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        HAKONIWA_FLAG_FIELD_NUMBER: _ClassVar[int]
        HOLD_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        hakoniwa_flag: int
        hold: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., hakoniwa_flag: _Optional[int] = ..., hold: _Optional[int] = ...) -> None: ...
    class EmblemChange(_message.Message):
        __slots__ = ["af_emblem", "af_emblem_num", "bf_emblem", "common"]
        AF_EMBLEM_FIELD_NUMBER: _ClassVar[int]
        AF_EMBLEM_NUM_FIELD_NUMBER: _ClassVar[int]
        BF_EMBLEM_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        af_emblem: int
        af_emblem_num: int
        bf_emblem: int
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_emblem: _Optional[int] = ..., af_emblem: _Optional[int] = ..., af_emblem_num: _Optional[int] = ...) -> None: ...
    class EmblemGet(_message.Message):
        __slots__ = ["common", "emblem_id", "get_route"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EMBLEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ROUTE_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        emblem_id: int
        get_route: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., get_route: _Optional[int] = ..., emblem_id: _Optional[int] = ...) -> None: ...
    class EpisodeEnd(_message.Message):
        __slots__ = ["auto_flag", "card_id", "common", "episode_id", "episode_type_id", "event_id", "read_num", "session_id", "session_time", "skip_flag", "spot_id"]
        AUTO_FLAG_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EPISODE_ID_FIELD_NUMBER: _ClassVar[int]
        EPISODE_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        READ_NUM_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SESSION_TIME_FIELD_NUMBER: _ClassVar[int]
        SKIP_FLAG_FIELD_NUMBER: _ClassVar[int]
        SPOT_ID_FIELD_NUMBER: _ClassVar[int]
        auto_flag: int
        card_id: int
        common: EventSchema.Common
        episode_id: int
        episode_type_id: int
        event_id: int
        read_num: int
        session_id: str
        session_time: int
        skip_flag: int
        spot_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., episode_type_id: _Optional[int] = ..., skip_flag: _Optional[int] = ..., episode_id: _Optional[int] = ..., event_id: _Optional[int] = ..., card_id: _Optional[int] = ..., spot_id: _Optional[int] = ..., auto_flag: _Optional[int] = ..., session_time: _Optional[int] = ..., read_num: _Optional[int] = ...) -> None: ...
    class EpisodeStart(_message.Message):
        __slots__ = ["card_id", "common", "episode_id", "episode_type_id", "event_id", "item_id", "item_num", "session_id", "spot_id", "voice"]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_FIELD_NUMBER: _ClassVar[int]
        EPISODE_ID_FIELD_NUMBER: _ClassVar[int]
        EPISODE_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SPOT_ID_FIELD_NUMBER: _ClassVar[int]
        VOICE_FIELD_NUMBER: _ClassVar[int]
        card_id: int
        common: EventSchema.Common
        episode_id: int
        episode_type_id: int
        event_id: int
        item_id: str
        item_num: str
        session_id: str
        spot_id: int
        voice: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., episode_type_id: _Optional[int] = ..., episode_id: _Optional[int] = ..., event_id: _Optional[int] = ..., voice: _Optional[int] = ..., card_id: _Optional[int] = ..., spot_id: _Optional[int] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ..., **kwargs) -> None: ...
    class EpisodeUnlock(_message.Message):
        __slots__ = ["card_id", "common", "episode_id", "episode_type_id", "event_id", "spot_id", "unlock_reason_id"]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EPISODE_ID_FIELD_NUMBER: _ClassVar[int]
        EPISODE_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        SPOT_ID_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_REASON_ID_FIELD_NUMBER: _ClassVar[int]
        card_id: int
        common: EventSchema.Common
        episode_id: int
        episode_type_id: int
        event_id: int
        spot_id: int
        unlock_reason_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., episode_type_id: _Optional[int] = ..., episode_id: _Optional[int] = ..., event_id: _Optional[int] = ..., unlock_reason_id: _Optional[int] = ..., card_id: _Optional[int] = ..., spot_id: _Optional[int] = ...) -> None: ...
    class EventEnd(_message.Message):
        __slots__ = ["common", "event_id", "event_pt_ranking", "event_ttl_pt", "high_score", "high_score_ranking"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_PT_RANKING_FIELD_NUMBER: _ClassVar[int]
        EVENT_TTL_PT_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        event_id: int
        event_pt_ranking: int
        event_ttl_pt: int
        high_score: int
        high_score_ranking: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., event_pt_ranking: _Optional[int] = ..., event_ttl_pt: _Optional[int] = ..., event_id: _Optional[int] = ..., high_score: _Optional[int] = ..., high_score_ranking: _Optional[int] = ...) -> None: ...
    class FavCardChange(_message.Message):
        __slots__ = ["af_card_id", "af_card_lv", "af_deepen", "af_flowering", "af_flowering_flag", "bf_card_id", "common", "premiere_flag"]
        AF_CARD_ID_FIELD_NUMBER: _ClassVar[int]
        AF_CARD_LV_FIELD_NUMBER: _ClassVar[int]
        AF_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        AF_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        AF_FLOWERING_FLAG_FIELD_NUMBER: _ClassVar[int]
        BF_CARD_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        PREMIERE_FLAG_FIELD_NUMBER: _ClassVar[int]
        af_card_id: int
        af_card_lv: int
        af_deepen: int
        af_flowering: int
        af_flowering_flag: int
        bf_card_id: int
        common: EventSchema.Common
        premiere_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_card_id: _Optional[int] = ..., af_card_id: _Optional[int] = ..., af_card_lv: _Optional[int] = ..., af_flowering_flag: _Optional[int] = ..., af_flowering: _Optional[int] = ..., af_deepen: _Optional[int] = ..., premiere_flag: _Optional[int] = ...) -> None: ...
    class FavHeroineChange(_message.Message):
        __slots__ = ["af_heroine_id", "af_heroine_lv", "bf_heroine_id", "common"]
        AF_HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        BF_HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        af_heroine_id: int
        af_heroine_lv: int
        bf_heroine_id: int
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_heroine_id: _Optional[int] = ..., af_heroine_id: _Optional[int] = ..., af_heroine_lv: _Optional[int] = ...) -> None: ...
    class FavMusicChange(_message.Message):
        __slots__ = ["af_music_id", "bf_music_id", "common"]
        AF_MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        BF_MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        af_music_id: int
        bf_music_id: int
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_music_id: _Optional[int] = ..., af_music_id: _Optional[int] = ...) -> None: ...
    class FortuneStageEnd(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill", "active_skill_id", "active_skill_t", "af_high_score_rate", "af_nakayoshi_lv", "af_nakayoshi_pt", "auto_active_flag", "auto_mode_flag", "ave_fps", "best_defeat_time", "bf_high_score_rate", "bomb_num", "bomb_time", "boost_ratio", "boost_reward_ratio", "boss_atack_option", "boss_damage", "boss_hp", "boss_id", "boss_target", "burst_skill", "burst_skill_id", "burst_skill_t", "card_id", "card_level", "clear_danmaku", "combo_num", "combo_target", "common", "continue_num", "daily_bonus_flag", "danmaku_flag", "danmaku_id", "deck_id", "defeat_time", "detailed_combo", "detailed_notes", "detailed_score_adjust", "detailed_score_base", "detailed_score_up_bonus", "difficulty", "dream_point", "drop_item_id", "drop_item_num", "event_bonus_point", "event_coin_id", "event_id", "event_point_id", "full_combo_flag", "gage_bonus", "get_card_exp", "get_event_coin", "get_event_point", "get_nakayoshi_pt", "get_point_charm", "get_power_charm", "get_user_exp", "heroine_id", "heroine_lv", "high_score", "life_result", "low_fps", "max_damage", "miss_num", "miss_time", "music_id", "mv_flag", "new_full_combo", "new_p_full_combo", "new_score_rank", "notes", "notes_size_option", "oiginal_event_point", "original_event_point", "passive_skill", "passive_skill_id", "passive_skill_t", "private_score_ranking", "rank_bonus_point", "rehearsal_flag", "remaint_boost", "result", "retry_life", "retry_self", "score", "score_rank", "score_target", "session_id", "skip_ticket_num", "spell_break_flag", "spell_card_id", "spell_card_place_id", "start_t", "total_score_ranking", "ttl_event_point", "unlock_bgm_flag", "unlock_bgm_id", "use_boost"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        AF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        AUTO_ACTIVE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AVE_FPS_FIELD_NUMBER: _ClassVar[int]
        BEST_DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        BF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        BOMB_NUM_FIELD_NUMBER: _ClassVar[int]
        BOMB_TIME_FIELD_NUMBER: _ClassVar[int]
        BOOST_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOSS_ATACK_OPTION_FIELD_NUMBER: _ClassVar[int]
        BOSS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        BOSS_HP_FIELD_NUMBER: _ClassVar[int]
        BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        BOSS_TARGET_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CLEAR_DANMAKU_FIELD_NUMBER: _ClassVar[int]
        COMBO_NUM_FIELD_NUMBER: _ClassVar[int]
        COMBO_TARGET_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_NUM_FIELD_NUMBER: _ClassVar[int]
        DAILY_BONUS_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_ID_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        DETAILED_COMBO_FIELD_NUMBER: _ClassVar[int]
        DETAILED_NOTES_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_ADJUST_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_BASE_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_UP_BONUS_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        DREAM_POINT_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        EVENT_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        EVENT_COIN_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_POINT_ID_FIELD_NUMBER: _ClassVar[int]
        FULL_COMBO_FLAG_FIELD_NUMBER: _ClassVar[int]
        GAGE_BONUS_FIELD_NUMBER: _ClassVar[int]
        GET_CARD_EXP_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_COIN_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        GET_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        GET_POINT_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_POWER_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_USER_EXP_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_FIELD_NUMBER: _ClassVar[int]
        LIFE_RESULT_FIELD_NUMBER: _ClassVar[int]
        LOW_FPS_FIELD_NUMBER: _ClassVar[int]
        MAX_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        MISS_NUM_FIELD_NUMBER: _ClassVar[int]
        MISS_TIME_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        MV_FLAG_FIELD_NUMBER: _ClassVar[int]
        NEW_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_P_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        NOTES_FIELD_NUMBER: _ClassVar[int]
        NOTES_SIZE_OPTION_FIELD_NUMBER: _ClassVar[int]
        OIGINAL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        ORIGINAL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        PRIVATE_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        RANK_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        REHEARSAL_FLAG_FIELD_NUMBER: _ClassVar[int]
        REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        RESULT_FIELD_NUMBER: _ClassVar[int]
        RETRY_LIFE_FIELD_NUMBER: _ClassVar[int]
        RETRY_SELF_FIELD_NUMBER: _ClassVar[int]
        SCORE_FIELD_NUMBER: _ClassVar[int]
        SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        SCORE_TARGET_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SKIP_TICKET_NUM_FIELD_NUMBER: _ClassVar[int]
        SPELL_BREAK_FLAG_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_ID_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        START_T_FIELD_NUMBER: _ClassVar[int]
        TOTAL_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        TTL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_FLAG_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill: int
        active_skill_id: str
        active_skill_t: float
        af_high_score_rate: int
        af_nakayoshi_lv: int
        af_nakayoshi_pt: int
        auto_active_flag: int
        auto_mode_flag: int
        ave_fps: int
        best_defeat_time: int
        bf_high_score_rate: int
        bomb_num: int
        bomb_time: str
        boost_ratio: int
        boost_reward_ratio: int
        boss_atack_option: int
        boss_damage: int
        boss_hp: int
        boss_id: int
        boss_target: int
        burst_skill: int
        burst_skill_id: str
        burst_skill_t: float
        card_id: str
        card_level: str
        clear_danmaku: int
        combo_num: int
        combo_target: int
        common: EventSchema.Common
        continue_num: int
        daily_bonus_flag: int
        danmaku_flag: int
        danmaku_id: int
        deck_id: int
        defeat_time: int
        detailed_combo: str
        detailed_notes: str
        detailed_score_adjust: str
        detailed_score_base: str
        detailed_score_up_bonus: str
        difficulty: int
        dream_point: int
        drop_item_id: str
        drop_item_num: str
        event_bonus_point: int
        event_coin_id: int
        event_id: int
        event_point_id: int
        full_combo_flag: int
        gage_bonus: int
        get_card_exp: int
        get_event_coin: int
        get_event_point: int
        get_nakayoshi_pt: int
        get_point_charm: int
        get_power_charm: int
        get_user_exp: int
        heroine_id: str
        heroine_lv: str
        high_score: int
        life_result: int
        low_fps: int
        max_damage: int
        miss_num: int
        miss_time: str
        music_id: int
        mv_flag: int
        new_full_combo: int
        new_p_full_combo: int
        new_score_rank: int
        notes: str
        notes_size_option: int
        oiginal_event_point: int
        original_event_point: int
        passive_skill: int
        passive_skill_id: str
        passive_skill_t: float
        private_score_ranking: int
        rank_bonus_point: int
        rehearsal_flag: int
        remaint_boost: int
        result: int
        retry_life: int
        retry_self: int
        score: int
        score_rank: int
        score_target: int
        session_id: str
        skip_ticket_num: int
        spell_break_flag: int
        spell_card_id: int
        spell_card_place_id: int
        start_t: int
        total_score_ranking: int
        ttl_event_point: int
        unlock_bgm_flag: int
        unlock_bgm_id: int
        use_boost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., music_id: _Optional[int] = ..., mv_flag: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., skip_ticket_num: _Optional[int] = ..., rehearsal_flag: _Optional[int] = ..., spell_break_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., life_result: _Optional[int] = ..., start_t: _Optional[int] = ..., deck_id: _Optional[int] = ..., score: _Optional[int] = ..., high_score: _Optional[int] = ..., bf_high_score_rate: _Optional[int] = ..., af_high_score_rate: _Optional[int] = ..., private_score_ranking: _Optional[int] = ..., total_score_ranking: _Optional[int] = ..., score_rank: _Optional[int] = ..., new_score_rank: _Optional[int] = ..., combo_num: _Optional[int] = ..., full_combo_flag: _Optional[int] = ..., new_full_combo: _Optional[int] = ..., new_p_full_combo: _Optional[int] = ..., auto_active_flag: _Optional[int] = ..., active_skill: _Optional[int] = ..., active_skill_t: _Optional[float] = ..., active_skill_id: _Optional[str] = ..., passive_skill: _Optional[int] = ..., passive_skill_t: _Optional[float] = ..., passive_skill_id: _Optional[str] = ..., spell_card_id: _Optional[int] = ..., spell_card_place_id: _Optional[int] = ..., boss_id: _Optional[int] = ..., boss_hp: _Optional[int] = ..., boss_damage: _Optional[int] = ..., max_damage: _Optional[int] = ..., defeat_time: _Optional[int] = ..., best_defeat_time: _Optional[int] = ..., get_user_exp: _Optional[int] = ..., drop_item_id: _Optional[str] = ..., drop_item_num: _Optional[str] = ..., ave_fps: _Optional[int] = ..., low_fps: _Optional[int] = ..., boost_reward_ratio: _Optional[int] = ..., dream_point: _Optional[int] = ..., card_id: _Optional[str] = ..., get_card_exp: _Optional[int] = ..., card_level: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., get_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_lv: _Optional[int] = ..., notes: _Optional[str] = ..., score_target: _Optional[int] = ..., combo_target: _Optional[int] = ..., boss_target: _Optional[int] = ..., daily_bonus_flag: _Optional[int] = ..., danmaku_flag: _Optional[int] = ..., danmaku_id: _Optional[int] = ..., get_point_charm: _Optional[int] = ..., get_power_charm: _Optional[int] = ..., miss_num: _Optional[int] = ..., miss_time: _Optional[str] = ..., bomb_num: _Optional[int] = ..., bomb_time: _Optional[str] = ..., clear_danmaku: _Optional[int] = ..., boost_ratio: _Optional[int] = ..., remaint_boost: _Optional[int] = ..., use_boost: _Optional[int] = ..., event_id: _Optional[int] = ..., event_point_id: _Optional[int] = ..., event_coin_id: _Optional[int] = ..., get_event_coin: _Optional[int] = ..., get_event_point: _Optional[int] = ..., oiginal_event_point: _Optional[int] = ..., rank_bonus_point: _Optional[int] = ..., event_bonus_point: _Optional[int] = ..., gage_bonus: _Optional[int] = ..., ttl_event_point: _Optional[int] = ..., original_event_point: _Optional[int] = ..., result: _Optional[int] = ..., continue_num: _Optional[int] = ..., retry_self: _Optional[int] = ..., retry_life: _Optional[int] = ..., detailed_notes: _Optional[str] = ..., boss_atack_option: _Optional[int] = ..., notes_size_option: _Optional[int] = ..., detailed_score_base: _Optional[str] = ..., detailed_combo: _Optional[str] = ..., detailed_score_up_bonus: _Optional[str] = ..., detailed_score_adjust: _Optional[str] = ..., unlock_bgm_flag: _Optional[int] = ..., unlock_bgm_id: _Optional[int] = ..., burst_skill: _Optional[int] = ..., burst_skill_t: _Optional[float] = ..., burst_skill_id: _Optional[str] = ..., **kwargs) -> None: ...
    class FortuneStageStart(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill_id", "active_skill_level", "attribute", "auto_mode_flag", "bf_nakayoshi_lv", "bf_nakayoshi_pt", "bluetooth_flag", "bonus_music_flag", "boss_effect_flag", "burst_skill_id", "burst_skill_level", "card_deepen", "card_flowering", "card_id", "card_level", "card_para_total", "card_rarity", "card_skill_level", "card_type_id", "common", "deck_id", "difficulty", "event_id", "expected_score_rank", "first_difficulty_flag", "first_music_flag", "flowering_lv_bonus", "heroine_bonus", "heroine_id", "heroine_lv", "heroine_skill", "heroine_skill_bonus", "mode", "music_id", "notes_speed", "notes_timing", "para_total", "passive_skill_boost", "passive_skill_id", "passive_skill_level", "rhythm_effect_flag", "session_id", "total_para_co", "total_para_em", "total_para_life", "total_para_ro", "total_para_shot", "type_fit_bonus", "vibration_flag"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        ATTRIBUTE_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        BLUETOOTH_FLAG_FIELD_NUMBER: _ClassVar[int]
        BONUS_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        BOSS_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        CARD_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        CARD_RARITY_FIELD_NUMBER: _ClassVar[int]
        CARD_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EXPECTED_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        FIRST_DIFFICULTY_FLAG_FIELD_NUMBER: _ClassVar[int]
        FIRST_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_LV_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_FIELD_NUMBER: _ClassVar[int]
        MODE_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        NOTES_SPEED_FIELD_NUMBER: _ClassVar[int]
        NOTES_TIMING_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_BOOST_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        RHYTHM_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_LIFE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_SHOT_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIT_BONUS_FIELD_NUMBER: _ClassVar[int]
        VIBRATION_FLAG_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill_id: str
        active_skill_level: str
        attribute: int
        auto_mode_flag: int
        bf_nakayoshi_lv: int
        bf_nakayoshi_pt: int
        bluetooth_flag: int
        bonus_music_flag: int
        boss_effect_flag: int
        burst_skill_id: str
        burst_skill_level: str
        card_deepen: str
        card_flowering: str
        card_id: str
        card_level: str
        card_para_total: int
        card_rarity: str
        card_skill_level: str
        card_type_id: str
        common: EventSchema.Common
        deck_id: int
        difficulty: int
        event_id: int
        expected_score_rank: int
        first_difficulty_flag: int
        first_music_flag: int
        flowering_lv_bonus: int
        heroine_bonus: int
        heroine_id: str
        heroine_lv: str
        heroine_skill: str
        heroine_skill_bonus: int
        mode: int
        music_id: int
        notes_speed: int
        notes_timing: int
        para_total: int
        passive_skill_boost: str
        passive_skill_id: str
        passive_skill_level: str
        rhythm_effect_flag: int
        session_id: str
        total_para_co: int
        total_para_em: int
        total_para_life: int
        total_para_ro: int
        total_para_shot: int
        type_fit_bonus: int
        vibration_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., notes_speed: _Optional[int] = ..., notes_timing: _Optional[int] = ..., vibration_flag: _Optional[int] = ..., bluetooth_flag: _Optional[int] = ..., music_id: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., first_music_flag: _Optional[int] = ..., first_difficulty_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., mode: _Optional[int] = ..., attribute: _Optional[int] = ..., boss_effect_flag: _Optional[int] = ..., rhythm_effect_flag: _Optional[int] = ..., deck_id: _Optional[int] = ..., card_id: _Optional[str] = ..., card_type_id: _Optional[str] = ..., card_level: _Optional[str] = ..., card_skill_level: _Optional[str] = ..., active_skill_id: _Optional[str] = ..., passive_skill_id: _Optional[str] = ..., card_rarity: _Optional[str] = ..., card_flowering: _Optional[str] = ..., card_deepen: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., heroine_skill: _Optional[str] = ..., bf_nakayoshi_pt: _Optional[int] = ..., bf_nakayoshi_lv: _Optional[int] = ..., total_para_life: _Optional[int] = ..., total_para_shot: _Optional[int] = ..., para_total: _Optional[int] = ..., total_para_em: _Optional[int] = ..., total_para_co: _Optional[int] = ..., total_para_ro: _Optional[int] = ..., card_para_total: _Optional[int] = ..., flowering_lv_bonus: _Optional[int] = ..., type_fit_bonus: _Optional[int] = ..., heroine_bonus: _Optional[int] = ..., heroine_skill_bonus: _Optional[int] = ..., expected_score_rank: _Optional[int] = ..., event_id: _Optional[int] = ..., bonus_music_flag: _Optional[int] = ..., passive_skill_boost: _Optional[str] = ..., burst_skill_id: _Optional[str] = ..., active_skill_level: _Optional[str] = ..., passive_skill_level: _Optional[str] = ..., burst_skill_level: _Optional[str] = ...) -> None: ...
    class Friend(_message.Message):
        __slots__ = ["action", "common"]
        ACTION_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        action: str
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., action: _Optional[str] = ...) -> None: ...
    class FriendServerPayload(_message.Message):
        __slots__ = ["follow_num", "max_follow_num", "target_user_id", "target_user_rank"]
        FOLLOW_NUM_FIELD_NUMBER: _ClassVar[int]
        MAX_FOLLOW_NUM_FIELD_NUMBER: _ClassVar[int]
        TARGET_USER_ID_FIELD_NUMBER: _ClassVar[int]
        TARGET_USER_RANK_FIELD_NUMBER: _ClassVar[int]
        follow_num: int
        max_follow_num: int
        target_user_id: str
        target_user_rank: int
        def __init__(self, target_user_id: _Optional[str] = ..., target_user_rank: _Optional[int] = ..., follow_num: _Optional[int] = ..., max_follow_num: _Optional[int] = ...) -> None: ...
    class Gacha(_message.Message):
        __slots__ = ["common", "gacha_appearance_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GACHA_APPEARANCE_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        gacha_appearance_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., gacha_appearance_id: _Optional[int] = ...) -> None: ...
    class GachaServerPayload(_message.Message):
        __slots__ = ["af_step_index", "bf_step_index", "exec_num", "gacha_id", "get_item_info", "num_free_crystal", "num_paid_crystal", "paid_amount", "paid_id", "paid_num", "paid_vc", "transaction_id"]
        AF_STEP_INDEX_FIELD_NUMBER: _ClassVar[int]
        BF_STEP_INDEX_FIELD_NUMBER: _ClassVar[int]
        EXEC_NUM_FIELD_NUMBER: _ClassVar[int]
        GACHA_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_INFO_FIELD_NUMBER: _ClassVar[int]
        NUM_FREE_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        NUM_PAID_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        PAID_AMOUNT_FIELD_NUMBER: _ClassVar[int]
        PAID_ID_FIELD_NUMBER: _ClassVar[int]
        PAID_NUM_FIELD_NUMBER: _ClassVar[int]
        PAID_VC_FIELD_NUMBER: _ClassVar[int]
        TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
        af_step_index: int
        bf_step_index: int
        exec_num: int
        gacha_id: str
        get_item_info: str
        num_free_crystal: int
        num_paid_crystal: int
        paid_amount: int
        paid_id: str
        paid_num: str
        paid_vc: int
        transaction_id: str
        def __init__(self, num_free_crystal: _Optional[int] = ..., num_paid_crystal: _Optional[int] = ..., transaction_id: _Optional[str] = ..., gacha_id: _Optional[str] = ..., exec_num: _Optional[int] = ..., get_item_info: _Optional[str] = ..., paid_id: _Optional[str] = ..., paid_num: _Optional[str] = ..., paid_amount: _Optional[int] = ..., paid_vc: _Optional[int] = ..., bf_step_index: _Optional[int] = ..., af_step_index: _Optional[int] = ...) -> None: ...
    class GameStartLoad(_message.Message):
        __slots__ = ["common", "elapsed_time", "place_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        ELAPSED_TIME_FIELD_NUMBER: _ClassVar[int]
        PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        elapsed_time: int
        place_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., elapsed_time: _Optional[int] = ..., place_id: _Optional[int] = ...) -> None: ...
    class GensoTicket(_message.Message):
        __slots__ = ["accum_num", "common", "donate_rate", "get_boost_rate", "get_donate_rate", "get_rate", "item_id", "item_num", "music_session_id", "odekake_session_id"]
        ACCUM_NUM_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DONATE_RATE_FIELD_NUMBER: _ClassVar[int]
        GET_BOOST_RATE_FIELD_NUMBER: _ClassVar[int]
        GET_DONATE_RATE_FIELD_NUMBER: _ClassVar[int]
        GET_RATE_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        MUSIC_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        accum_num: int
        common: EventSchema.Common
        donate_rate: float
        get_boost_rate: float
        get_donate_rate: float
        get_rate: float
        item_id: int
        item_num: int
        music_session_id: str
        odekake_session_id: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., item_id: _Optional[int] = ..., item_num: _Optional[int] = ..., accum_num: _Optional[int] = ..., donate_rate: _Optional[float] = ..., get_donate_rate: _Optional[float] = ..., get_boost_rate: _Optional[float] = ..., get_rate: _Optional[float] = ..., music_session_id: _Optional[str] = ..., odekake_session_id: _Optional[str] = ...) -> None: ...
    class GetItem(_message.Message):
        __slots__ = ["common", "instance_id", "item_id", "item_num", "item_type_id", "route_id", "route_option", "send_inventory"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        ITEM_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        ROUTE_ID_FIELD_NUMBER: _ClassVar[int]
        ROUTE_OPTION_FIELD_NUMBER: _ClassVar[int]
        SEND_INVENTORY_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        instance_id: int
        item_id: int
        item_num: int
        item_type_id: int
        route_id: int
        route_option: str
        send_inventory: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., item_id: _Optional[int] = ..., item_num: _Optional[int] = ..., item_type_id: _Optional[int] = ..., route_id: _Optional[int] = ..., instance_id: _Optional[int] = ..., send_inventory: _Optional[int] = ..., route_option: _Optional[str] = ...) -> None: ...
    class GpDeckCh(_message.Message):
        __slots__ = ["active_skill_id", "active_skill_level", "af_card", "af_card_instance", "af_heroine1", "af_heroine1_instance", "af_heroine2", "af_heroine2_instance", "bf_card", "bf_heroine1", "bf_heroine2", "burst_skill_id", "burst_skill_level", "card_deepen", "card_flowering", "card_main_level", "card_para_co", "card_para_em", "card_para_ro", "card_para_total", "card_rarity", "card_skill_level", "card_type_id", "common", "deck_call", "deck_id", "deck_name", "deck_slot", "flowering_flag", "heroine1_co_ratio", "heroine1_em_ratio", "heroine1_heroine_skill_id", "heroine1_life", "heroine1_lv", "heroine1_origin_co_ratio", "heroine1_origin_em_ratio", "heroine1_origin_life", "heroine1_origin_ro_ratio", "heroine1_origin_shot", "heroine1_ro_ratio", "heroine1_shot", "heroine2_co_ratio", "heroine2_em_ratio", "heroine2_heroine_skill_id", "heroine2_life", "heroine2_lv", "heroine2_origin_co_ratio", "heroine2_origin_em_ratio", "heroine2_origin_life", "heroine2_origin_ro_ratio", "heroine2_origin_shot", "heroine2_ro_ratio", "heroine2_shot", "medley_deck_id", "nakayoshi_lv", "nakayoshi_pt", "odekake_skill_id", "odekake_skill_lv", "para_total", "passive_skill_id", "passive_skill_level", "premiere_flag", "suggestion", "suggestion_card", "suggestion_heroine", "suggestion_skill", "suggestion_type", "total_para_co", "total_para_em", "total_para_ro"]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        AF_CARD_FIELD_NUMBER: _ClassVar[int]
        AF_CARD_INSTANCE_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE1_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE1_INSTANCE_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE2_FIELD_NUMBER: _ClassVar[int]
        AF_HEROINE2_INSTANCE_FIELD_NUMBER: _ClassVar[int]
        BF_CARD_FIELD_NUMBER: _ClassVar[int]
        BF_HEROINE1_FIELD_NUMBER: _ClassVar[int]
        BF_HEROINE2_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        CARD_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        CARD_MAIN_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        CARD_RARITY_FIELD_NUMBER: _ClassVar[int]
        CARD_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DECK_CALL_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DECK_NAME_FIELD_NUMBER: _ClassVar[int]
        DECK_SLOT_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_FLAG_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_CO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_EM_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_HEROINE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_LIFE_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_CO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_EM_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_LIFE_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_RO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_ORIGIN_SHOT_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_RO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE1_SHOT_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_CO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_EM_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_HEROINE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_LIFE_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_CO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_EM_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_LIFE_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_RO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_ORIGIN_SHOT_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_RO_RATIO_FIELD_NUMBER: _ClassVar[int]
        HEROINE2_SHOT_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_DECK_ID_FIELD_NUMBER: _ClassVar[int]
        NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SKILL_LV_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        PREMIERE_FLAG_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_CARD_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_HEROINE_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_SKILL_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_TYPE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        active_skill_id: str
        active_skill_level: str
        af_card: str
        af_card_instance: str
        af_heroine1: int
        af_heroine1_instance: int
        af_heroine2: int
        af_heroine2_instance: int
        bf_card: str
        bf_heroine1: int
        bf_heroine2: int
        burst_skill_id: str
        burst_skill_level: str
        card_deepen: str
        card_flowering: str
        card_main_level: str
        card_para_co: int
        card_para_em: int
        card_para_ro: int
        card_para_total: int
        card_rarity: str
        card_skill_level: str
        card_type_id: str
        common: EventSchema.Common
        deck_call: int
        deck_id: int
        deck_name: str
        deck_slot: int
        flowering_flag: str
        heroine1_co_ratio: float
        heroine1_em_ratio: float
        heroine1_heroine_skill_id: int
        heroine1_life: int
        heroine1_lv: int
        heroine1_origin_co_ratio: float
        heroine1_origin_em_ratio: float
        heroine1_origin_life: int
        heroine1_origin_ro_ratio: float
        heroine1_origin_shot: int
        heroine1_ro_ratio: float
        heroine1_shot: int
        heroine2_co_ratio: float
        heroine2_em_ratio: float
        heroine2_heroine_skill_id: int
        heroine2_life: int
        heroine2_lv: int
        heroine2_origin_co_ratio: float
        heroine2_origin_em_ratio: float
        heroine2_origin_life: int
        heroine2_origin_ro_ratio: float
        heroine2_origin_shot: int
        heroine2_ro_ratio: float
        heroine2_shot: int
        medley_deck_id: int
        nakayoshi_lv: int
        nakayoshi_pt: int
        odekake_skill_id: str
        odekake_skill_lv: str
        para_total: int
        passive_skill_id: str
        passive_skill_level: str
        premiere_flag: str
        suggestion: int
        suggestion_card: int
        suggestion_heroine: int
        suggestion_skill: int
        suggestion_type: int
        total_para_co: int
        total_para_em: int
        total_para_ro: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_card: _Optional[str] = ..., af_card: _Optional[str] = ..., af_card_instance: _Optional[str] = ..., card_rarity: _Optional[str] = ..., card_type_id: _Optional[str] = ..., card_main_level: _Optional[str] = ..., card_skill_level: _Optional[str] = ..., active_skill_id: _Optional[str] = ..., passive_skill_id: _Optional[str] = ..., burst_skill_id: _Optional[str] = ..., odekake_skill_id: _Optional[str] = ..., active_skill_level: _Optional[str] = ..., passive_skill_level: _Optional[str] = ..., burst_skill_level: _Optional[str] = ..., odekake_skill_lv: _Optional[str] = ..., card_flowering: _Optional[str] = ..., card_deepen: _Optional[str] = ..., flowering_flag: _Optional[str] = ..., premiere_flag: _Optional[str] = ..., bf_heroine1: _Optional[int] = ..., af_heroine1: _Optional[int] = ..., bf_heroine2: _Optional[int] = ..., af_heroine2: _Optional[int] = ..., af_heroine1_instance: _Optional[int] = ..., af_heroine2_instance: _Optional[int] = ..., heroine1_life: _Optional[int] = ..., heroine2_life: _Optional[int] = ..., heroine1_shot: _Optional[int] = ..., heroine2_shot: _Optional[int] = ..., heroine1_lv: _Optional[int] = ..., heroine2_lv: _Optional[int] = ..., heroine1_heroine_skill_id: _Optional[int] = ..., heroine2_heroine_skill_id: _Optional[int] = ..., heroine1_em_ratio: _Optional[float] = ..., heroine2_em_ratio: _Optional[float] = ..., heroine1_co_ratio: _Optional[float] = ..., heroine2_co_ratio: _Optional[float] = ..., heroine1_ro_ratio: _Optional[float] = ..., heroine2_ro_ratio: _Optional[float] = ..., heroine1_origin_life: _Optional[int] = ..., heroine2_origin_life: _Optional[int] = ..., heroine1_origin_shot: _Optional[int] = ..., heroine2_origin_shot: _Optional[int] = ..., heroine1_origin_em_ratio: _Optional[float] = ..., heroine2_origin_em_ratio: _Optional[float] = ..., heroine1_origin_co_ratio: _Optional[float] = ..., heroine2_origin_co_ratio: _Optional[float] = ..., heroine1_origin_ro_ratio: _Optional[float] = ..., heroine2_origin_ro_ratio: _Optional[float] = ..., nakayoshi_pt: _Optional[int] = ..., nakayoshi_lv: _Optional[int] = ..., card_para_total: _Optional[int] = ..., card_para_em: _Optional[int] = ..., card_para_co: _Optional[int] = ..., card_para_ro: _Optional[int] = ..., para_total: _Optional[int] = ..., total_para_em: _Optional[int] = ..., total_para_co: _Optional[int] = ..., total_para_ro: _Optional[int] = ..., medley_deck_id: _Optional[int] = ..., deck_call: _Optional[int] = ..., deck_id: _Optional[int] = ..., deck_slot: _Optional[int] = ..., deck_name: _Optional[str] = ..., suggestion: _Optional[int] = ..., suggestion_type: _Optional[int] = ..., suggestion_heroine: _Optional[int] = ..., suggestion_card: _Optional[int] = ..., suggestion_skill: _Optional[int] = ...) -> None: ...
    class GpEnd(_message.Message):
        __slots__ = ["af_gp_class_rank", "af_gp_period_point", "bf_gp_class_rank", "bf_gp_period_point", "common", "gp_class_change", "gp_period_class_ranking", "gp_period_high_score", "gp_period_id", "gp_period_ranking", "gp_season_id", "gp_season_point", "gp_season_ranking"]
        AF_GP_CLASS_RANK_FIELD_NUMBER: _ClassVar[int]
        AF_GP_PERIOD_POINT_FIELD_NUMBER: _ClassVar[int]
        BF_GP_CLASS_RANK_FIELD_NUMBER: _ClassVar[int]
        BF_GP_PERIOD_POINT_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GP_CLASS_CHANGE_FIELD_NUMBER: _ClassVar[int]
        GP_PERIOD_CLASS_RANKING_FIELD_NUMBER: _ClassVar[int]
        GP_PERIOD_HIGH_SCORE_FIELD_NUMBER: _ClassVar[int]
        GP_PERIOD_ID_FIELD_NUMBER: _ClassVar[int]
        GP_PERIOD_RANKING_FIELD_NUMBER: _ClassVar[int]
        GP_SEASON_ID_FIELD_NUMBER: _ClassVar[int]
        GP_SEASON_POINT_FIELD_NUMBER: _ClassVar[int]
        GP_SEASON_RANKING_FIELD_NUMBER: _ClassVar[int]
        af_gp_class_rank: int
        af_gp_period_point: int
        bf_gp_class_rank: int
        bf_gp_period_point: int
        common: EventSchema.Common
        gp_class_change: int
        gp_period_class_ranking: int
        gp_period_high_score: int
        gp_period_id: int
        gp_period_ranking: int
        gp_season_id: int
        gp_season_point: int
        gp_season_ranking: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., gp_season_id: _Optional[int] = ..., gp_season_ranking: _Optional[int] = ..., gp_season_point: _Optional[int] = ..., gp_period_id: _Optional[int] = ..., gp_period_ranking: _Optional[int] = ..., af_gp_period_point: _Optional[int] = ..., bf_gp_period_point: _Optional[int] = ..., gp_period_high_score: _Optional[int] = ..., gp_period_class_ranking: _Optional[int] = ..., af_gp_class_rank: _Optional[int] = ..., bf_gp_class_rank: _Optional[int] = ..., gp_class_change: _Optional[int] = ...) -> None: ...
    class GpMedleyEnd(_message.Message):
        __slots__ = ["af_high_medley_total_score", "bf_high_medley_total_score", "common", "gp_period_id", "gp_season_id", "medley_difficulty", "medley_end_status", "medley_first_score", "medley_second_score", "medley_session_id", "medley_third_score", "medley_total_score"]
        AF_HIGH_MEDLEY_TOTAL_SCORE_FIELD_NUMBER: _ClassVar[int]
        BF_HIGH_MEDLEY_TOTAL_SCORE_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GP_PERIOD_ID_FIELD_NUMBER: _ClassVar[int]
        GP_SEASON_ID_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_END_STATUS_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_FIRST_SCORE_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_SECOND_SCORE_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_THIRD_SCORE_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_TOTAL_SCORE_FIELD_NUMBER: _ClassVar[int]
        af_high_medley_total_score: int
        bf_high_medley_total_score: int
        common: EventSchema.Common
        gp_period_id: int
        gp_season_id: int
        medley_difficulty: int
        medley_end_status: int
        medley_first_score: int
        medley_second_score: int
        medley_session_id: str
        medley_third_score: int
        medley_total_score: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., gp_season_id: _Optional[int] = ..., gp_period_id: _Optional[int] = ..., medley_session_id: _Optional[str] = ..., medley_difficulty: _Optional[int] = ..., medley_total_score: _Optional[int] = ..., medley_first_score: _Optional[int] = ..., medley_second_score: _Optional[int] = ..., medley_third_score: _Optional[int] = ..., bf_high_medley_total_score: _Optional[int] = ..., af_high_medley_total_score: _Optional[int] = ..., medley_end_status: _Optional[int] = ...) -> None: ...
    class GpMedleyStart(_message.Message):
        __slots__ = ["common", "gp_period_id", "gp_season_id", "medley_difficulty", "medley_session_id", "use_item_id", "use_item_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GP_PERIOD_ID_FIELD_NUMBER: _ClassVar[int]
        GP_SEASON_ID_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        gp_period_id: int
        gp_season_id: int
        medley_difficulty: int
        medley_session_id: str
        use_item_id: str
        use_item_num: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., gp_season_id: _Optional[int] = ..., gp_period_id: _Optional[int] = ..., medley_session_id: _Optional[str] = ..., medley_difficulty: _Optional[int] = ..., use_item_id: _Optional[str] = ..., use_item_num: _Optional[str] = ...) -> None: ...
    class GpStageEnd(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill", "active_skill_id", "active_skill_t", "af_high_medley_total_score", "af_high_score_rate", "af_nakayoshi_lv", "af_nakayoshi_pt", "auto_active_flag", "auto_mode_flag", "ave_fps", "best_defeat_time", "bf_high_medley_total_score", "bf_high_score_rate", "bomb_num", "bomb_time", "boost_ratio", "boost_reward_ratio", "boss_atack_option", "boss_damage", "boss_hp", "boss_id", "boss_target", "burst_skill", "burst_skill_id", "burst_skill_t", "card_id", "card_level", "clear_danmaku", "combo_num", "combo_target", "common", "continue_num", "daily_bonus_flag", "danmaku_flag", "danmaku_id", "deck_id", "defeat_time", "detailed_combo", "detailed_notes", "detailed_score_adjust", "detailed_score_base", "detailed_score_up_bonus", "difficulty", "dream_point", "drop_item_id", "drop_item_num", "full_combo_flag", "get_card_exp", "get_nakayoshi_pt", "get_point_charm", "get_power_charm", "get_user_exp", "gp_period_id", "gp_season_id", "heroine_id", "heroine_lv", "high_score", "life_result", "low_fps", "max_damage", "medley_deck_id", "medley_number", "medley_session_id", "medley_total_score", "miss_num", "miss_time", "music_id", "mv_flag", "new_full_combo", "new_p_full_combo", "new_score_rank", "notes", "notes_size_option", "passive_skill", "passive_skill_id", "passive_skill_t", "private_score_ranking", "rehearsal_flag", "remaint_boost", "result", "retry_life", "retry_self", "score", "score_rank", "score_target", "session_id", "skip_ticket_num", "spell_break_flag", "spell_card_id", "spell_card_place_id", "start_t", "total_score_ranking", "unlock_bgm_flag", "unlock_bgm_id", "use_boost"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        AF_HIGH_MEDLEY_TOTAL_SCORE_FIELD_NUMBER: _ClassVar[int]
        AF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        AUTO_ACTIVE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AVE_FPS_FIELD_NUMBER: _ClassVar[int]
        BEST_DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        BF_HIGH_MEDLEY_TOTAL_SCORE_FIELD_NUMBER: _ClassVar[int]
        BF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        BOMB_NUM_FIELD_NUMBER: _ClassVar[int]
        BOMB_TIME_FIELD_NUMBER: _ClassVar[int]
        BOOST_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOSS_ATACK_OPTION_FIELD_NUMBER: _ClassVar[int]
        BOSS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        BOSS_HP_FIELD_NUMBER: _ClassVar[int]
        BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        BOSS_TARGET_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CLEAR_DANMAKU_FIELD_NUMBER: _ClassVar[int]
        COMBO_NUM_FIELD_NUMBER: _ClassVar[int]
        COMBO_TARGET_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_NUM_FIELD_NUMBER: _ClassVar[int]
        DAILY_BONUS_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_ID_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        DETAILED_COMBO_FIELD_NUMBER: _ClassVar[int]
        DETAILED_NOTES_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_ADJUST_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_BASE_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_UP_BONUS_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        DREAM_POINT_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        FULL_COMBO_FLAG_FIELD_NUMBER: _ClassVar[int]
        GET_CARD_EXP_FIELD_NUMBER: _ClassVar[int]
        GET_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        GET_POINT_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_POWER_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_USER_EXP_FIELD_NUMBER: _ClassVar[int]
        GP_PERIOD_ID_FIELD_NUMBER: _ClassVar[int]
        GP_SEASON_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_FIELD_NUMBER: _ClassVar[int]
        LIFE_RESULT_FIELD_NUMBER: _ClassVar[int]
        LOW_FPS_FIELD_NUMBER: _ClassVar[int]
        MAX_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_DECK_ID_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_NUMBER_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_TOTAL_SCORE_FIELD_NUMBER: _ClassVar[int]
        MISS_NUM_FIELD_NUMBER: _ClassVar[int]
        MISS_TIME_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        MV_FLAG_FIELD_NUMBER: _ClassVar[int]
        NEW_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_P_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        NOTES_FIELD_NUMBER: _ClassVar[int]
        NOTES_SIZE_OPTION_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        PRIVATE_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        REHEARSAL_FLAG_FIELD_NUMBER: _ClassVar[int]
        REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        RESULT_FIELD_NUMBER: _ClassVar[int]
        RETRY_LIFE_FIELD_NUMBER: _ClassVar[int]
        RETRY_SELF_FIELD_NUMBER: _ClassVar[int]
        SCORE_FIELD_NUMBER: _ClassVar[int]
        SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        SCORE_TARGET_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SKIP_TICKET_NUM_FIELD_NUMBER: _ClassVar[int]
        SPELL_BREAK_FLAG_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_ID_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        START_T_FIELD_NUMBER: _ClassVar[int]
        TOTAL_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_FLAG_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill: int
        active_skill_id: str
        active_skill_t: float
        af_high_medley_total_score: int
        af_high_score_rate: int
        af_nakayoshi_lv: int
        af_nakayoshi_pt: int
        auto_active_flag: int
        auto_mode_flag: int
        ave_fps: int
        best_defeat_time: int
        bf_high_medley_total_score: int
        bf_high_score_rate: int
        bomb_num: int
        bomb_time: str
        boost_ratio: int
        boost_reward_ratio: int
        boss_atack_option: int
        boss_damage: int
        boss_hp: int
        boss_id: int
        boss_target: int
        burst_skill: int
        burst_skill_id: str
        burst_skill_t: float
        card_id: str
        card_level: str
        clear_danmaku: int
        combo_num: int
        combo_target: int
        common: EventSchema.Common
        continue_num: int
        daily_bonus_flag: int
        danmaku_flag: int
        danmaku_id: int
        deck_id: int
        defeat_time: int
        detailed_combo: str
        detailed_notes: str
        detailed_score_adjust: str
        detailed_score_base: str
        detailed_score_up_bonus: str
        difficulty: int
        dream_point: int
        drop_item_id: str
        drop_item_num: str
        full_combo_flag: int
        get_card_exp: int
        get_nakayoshi_pt: int
        get_point_charm: int
        get_power_charm: int
        get_user_exp: int
        gp_period_id: int
        gp_season_id: int
        heroine_id: str
        heroine_lv: str
        high_score: int
        life_result: int
        low_fps: int
        max_damage: int
        medley_deck_id: int
        medley_number: int
        medley_session_id: str
        medley_total_score: int
        miss_num: int
        miss_time: str
        music_id: int
        mv_flag: int
        new_full_combo: int
        new_p_full_combo: int
        new_score_rank: int
        notes: str
        notes_size_option: int
        passive_skill: int
        passive_skill_id: str
        passive_skill_t: float
        private_score_ranking: int
        rehearsal_flag: int
        remaint_boost: int
        result: int
        retry_life: int
        retry_self: int
        score: int
        score_rank: int
        score_target: int
        session_id: str
        skip_ticket_num: int
        spell_break_flag: int
        spell_card_id: int
        spell_card_place_id: int
        start_t: int
        total_score_ranking: int
        unlock_bgm_flag: int
        unlock_bgm_id: int
        use_boost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., medley_session_id: _Optional[str] = ..., session_id: _Optional[str] = ..., music_id: _Optional[int] = ..., medley_number: _Optional[int] = ..., medley_deck_id: _Optional[int] = ..., mv_flag: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., skip_ticket_num: _Optional[int] = ..., rehearsal_flag: _Optional[int] = ..., spell_break_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., life_result: _Optional[int] = ..., start_t: _Optional[int] = ..., deck_id: _Optional[int] = ..., medley_total_score: _Optional[int] = ..., bf_high_medley_total_score: _Optional[int] = ..., af_high_medley_total_score: _Optional[int] = ..., score: _Optional[int] = ..., high_score: _Optional[int] = ..., bf_high_score_rate: _Optional[int] = ..., af_high_score_rate: _Optional[int] = ..., private_score_ranking: _Optional[int] = ..., total_score_ranking: _Optional[int] = ..., score_rank: _Optional[int] = ..., new_score_rank: _Optional[int] = ..., combo_num: _Optional[int] = ..., full_combo_flag: _Optional[int] = ..., new_full_combo: _Optional[int] = ..., new_p_full_combo: _Optional[int] = ..., auto_active_flag: _Optional[int] = ..., active_skill: _Optional[int] = ..., active_skill_t: _Optional[float] = ..., active_skill_id: _Optional[str] = ..., passive_skill: _Optional[int] = ..., passive_skill_t: _Optional[float] = ..., passive_skill_id: _Optional[str] = ..., burst_skill: _Optional[int] = ..., burst_skill_t: _Optional[float] = ..., burst_skill_id: _Optional[str] = ..., spell_card_id: _Optional[int] = ..., spell_card_place_id: _Optional[int] = ..., boss_id: _Optional[int] = ..., boss_hp: _Optional[int] = ..., boss_damage: _Optional[int] = ..., max_damage: _Optional[int] = ..., defeat_time: _Optional[int] = ..., best_defeat_time: _Optional[int] = ..., get_user_exp: _Optional[int] = ..., drop_item_id: _Optional[str] = ..., drop_item_num: _Optional[str] = ..., ave_fps: _Optional[int] = ..., low_fps: _Optional[int] = ..., boost_reward_ratio: _Optional[int] = ..., dream_point: _Optional[int] = ..., card_id: _Optional[str] = ..., get_card_exp: _Optional[int] = ..., card_level: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., get_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_lv: _Optional[int] = ..., notes: _Optional[str] = ..., score_target: _Optional[int] = ..., combo_target: _Optional[int] = ..., boss_target: _Optional[int] = ..., daily_bonus_flag: _Optional[int] = ..., danmaku_flag: _Optional[int] = ..., danmaku_id: _Optional[int] = ..., get_point_charm: _Optional[int] = ..., get_power_charm: _Optional[int] = ..., miss_num: _Optional[int] = ..., miss_time: _Optional[str] = ..., bomb_num: _Optional[int] = ..., bomb_time: _Optional[str] = ..., clear_danmaku: _Optional[int] = ..., boost_ratio: _Optional[int] = ..., remaint_boost: _Optional[int] = ..., use_boost: _Optional[int] = ..., gp_season_id: _Optional[int] = ..., gp_period_id: _Optional[int] = ..., result: _Optional[int] = ..., continue_num: _Optional[int] = ..., retry_self: _Optional[int] = ..., retry_life: _Optional[int] = ..., detailed_notes: _Optional[str] = ..., boss_atack_option: _Optional[int] = ..., notes_size_option: _Optional[int] = ..., detailed_score_base: _Optional[str] = ..., detailed_combo: _Optional[str] = ..., detailed_score_up_bonus: _Optional[str] = ..., detailed_score_adjust: _Optional[str] = ..., unlock_bgm_flag: _Optional[int] = ..., unlock_bgm_id: _Optional[int] = ..., **kwargs) -> None: ...
    class GpStageStart(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill_id", "active_skill_level", "attribute", "auto_mode_flag", "bf_nakayoshi_lv", "bf_nakayoshi_pt", "bluetooth_flag", "bonus_music_flag", "boss_effect_flag", "burst_skill_id", "burst_skill_level", "card_deepen", "card_flowering", "card_id", "card_level", "card_para_total", "card_rarity", "card_skill_level", "card_type_id", "common", "difficulty", "expected_score_rank", "first_difficulty_flag", "first_music_flag", "flowering_lv_bonus", "gp_period_id", "gp_season_id", "heroine_bonus", "heroine_id", "heroine_lv", "heroine_skill", "heroine_skill_bonus", "medley_deck_id", "medley_number", "medley_session_id", "mode", "music_id", "notes_speed", "notes_timing", "para_total", "passive_skill_boost", "passive_skill_id", "passive_skill_level", "rhythm_effect_flag", "session_id", "total_para_co", "total_para_em", "total_para_life", "total_para_ro", "total_para_shot", "type_fit_bonus", "vibration_flag"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        ATTRIBUTE_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        BLUETOOTH_FLAG_FIELD_NUMBER: _ClassVar[int]
        BONUS_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        BOSS_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        CARD_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        CARD_RARITY_FIELD_NUMBER: _ClassVar[int]
        CARD_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        EXPECTED_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        FIRST_DIFFICULTY_FLAG_FIELD_NUMBER: _ClassVar[int]
        FIRST_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_LV_BONUS_FIELD_NUMBER: _ClassVar[int]
        GP_PERIOD_ID_FIELD_NUMBER: _ClassVar[int]
        GP_SEASON_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_DECK_ID_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_NUMBER_FIELD_NUMBER: _ClassVar[int]
        MEDLEY_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        MODE_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        NOTES_SPEED_FIELD_NUMBER: _ClassVar[int]
        NOTES_TIMING_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_BOOST_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        RHYTHM_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_LIFE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_SHOT_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIT_BONUS_FIELD_NUMBER: _ClassVar[int]
        VIBRATION_FLAG_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill_id: str
        active_skill_level: str
        attribute: int
        auto_mode_flag: int
        bf_nakayoshi_lv: int
        bf_nakayoshi_pt: int
        bluetooth_flag: int
        bonus_music_flag: int
        boss_effect_flag: int
        burst_skill_id: str
        burst_skill_level: str
        card_deepen: str
        card_flowering: str
        card_id: str
        card_level: str
        card_para_total: int
        card_rarity: str
        card_skill_level: str
        card_type_id: str
        common: EventSchema.Common
        difficulty: int
        expected_score_rank: int
        first_difficulty_flag: int
        first_music_flag: int
        flowering_lv_bonus: int
        gp_period_id: int
        gp_season_id: int
        heroine_bonus: int
        heroine_id: str
        heroine_lv: str
        heroine_skill: str
        heroine_skill_bonus: int
        medley_deck_id: int
        medley_number: int
        medley_session_id: str
        mode: int
        music_id: int
        notes_speed: int
        notes_timing: int
        para_total: int
        passive_skill_boost: str
        passive_skill_id: str
        passive_skill_level: str
        rhythm_effect_flag: int
        session_id: str
        total_para_co: int
        total_para_em: int
        total_para_life: int
        total_para_ro: int
        total_para_shot: int
        type_fit_bonus: int
        vibration_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., medley_session_id: _Optional[str] = ..., session_id: _Optional[str] = ..., notes_speed: _Optional[int] = ..., notes_timing: _Optional[int] = ..., vibration_flag: _Optional[int] = ..., bluetooth_flag: _Optional[int] = ..., music_id: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., first_music_flag: _Optional[int] = ..., first_difficulty_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., mode: _Optional[int] = ..., attribute: _Optional[int] = ..., boss_effect_flag: _Optional[int] = ..., rhythm_effect_flag: _Optional[int] = ..., medley_number: _Optional[int] = ..., medley_deck_id: _Optional[int] = ..., card_id: _Optional[str] = ..., card_type_id: _Optional[str] = ..., card_level: _Optional[str] = ..., card_skill_level: _Optional[str] = ..., active_skill_id: _Optional[str] = ..., passive_skill_id: _Optional[str] = ..., burst_skill_id: _Optional[str] = ..., active_skill_level: _Optional[str] = ..., passive_skill_level: _Optional[str] = ..., burst_skill_level: _Optional[str] = ..., card_rarity: _Optional[str] = ..., card_flowering: _Optional[str] = ..., card_deepen: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., heroine_skill: _Optional[str] = ..., bf_nakayoshi_pt: _Optional[int] = ..., bf_nakayoshi_lv: _Optional[int] = ..., total_para_life: _Optional[int] = ..., total_para_shot: _Optional[int] = ..., para_total: _Optional[int] = ..., total_para_em: _Optional[int] = ..., total_para_co: _Optional[int] = ..., total_para_ro: _Optional[int] = ..., card_para_total: _Optional[int] = ..., flowering_lv_bonus: _Optional[int] = ..., type_fit_bonus: _Optional[int] = ..., heroine_bonus: _Optional[int] = ..., heroine_skill_bonus: _Optional[int] = ..., expected_score_rank: _Optional[int] = ..., gp_season_id: _Optional[int] = ..., gp_period_id: _Optional[int] = ..., bonus_music_flag: _Optional[int] = ..., passive_skill_boost: _Optional[str] = ...) -> None: ...
    class GpTicket(_message.Message):
        __slots__ = ["af_tikcet", "common", "heal_ticket", "use_item_id", "use_item_num", "use_place_id"]
        AF_TIKCET_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        HEAL_TICKET_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        USE_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        af_tikcet: int
        common: EventSchema.Common
        heal_ticket: int
        use_item_id: str
        use_item_num: str
        use_place_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., heal_ticket: _Optional[int] = ..., af_tikcet: _Optional[int] = ..., use_item_id: _Optional[str] = ..., use_item_num: _Optional[str] = ..., use_place_id: _Optional[int] = ...) -> None: ...
    class Hakoniwa(_message.Message):
        __slots__ = ["common", "episode_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EPISODE_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        episode_id: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., episode_id: _Optional[str] = ...) -> None: ...
    class HeroineBulkTrade(_message.Message):
        __slots__ = ["common", "enhance_id", "enhance_instance_id", "enhance_lv_id", "first_trade_id", "first_trade_instance_id", "option_flag", "second_trade_id", "second_trade_instance_id", "use_item_id", "use_item_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        ENHANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ENHANCE_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ENHANCE_LV_ID_FIELD_NUMBER: _ClassVar[int]
        FIRST_TRADE_ID_FIELD_NUMBER: _ClassVar[int]
        FIRST_TRADE_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        OPTION_FLAG_FIELD_NUMBER: _ClassVar[int]
        SECOND_TRADE_ID_FIELD_NUMBER: _ClassVar[int]
        SECOND_TRADE_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        enhance_id: str
        enhance_instance_id: str
        enhance_lv_id: str
        first_trade_id: str
        first_trade_instance_id: str
        option_flag: str
        second_trade_id: str
        second_trade_instance_id: str
        use_item_id: str
        use_item_num: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., enhance_id: _Optional[str] = ..., first_trade_id: _Optional[str] = ..., second_trade_id: _Optional[str] = ..., enhance_instance_id: _Optional[str] = ..., first_trade_instance_id: _Optional[str] = ..., second_trade_instance_id: _Optional[str] = ..., enhance_lv_id: _Optional[str] = ..., use_item_id: _Optional[str] = ..., use_item_num: _Optional[str] = ..., option_flag: _Optional[str] = ...) -> None: ...
    class HeroineEnhance(_message.Message):
        __slots__ = ["af_life", "af_main_lv", "af_pow", "af_shot", "bf_life", "bf_main_lv", "bf_pow", "bf_shot", "common", "get_item_id", "get_item_num", "heroine_id", "heroine_skill_id", "instance_id", "main_lv_limit", "use_heroine_num", "use_valuable_num"]
        AF_LIFE_FIELD_NUMBER: _ClassVar[int]
        AF_MAIN_LV_FIELD_NUMBER: _ClassVar[int]
        AF_POW_FIELD_NUMBER: _ClassVar[int]
        AF_SHOT_FIELD_NUMBER: _ClassVar[int]
        BF_LIFE_FIELD_NUMBER: _ClassVar[int]
        BF_MAIN_LV_FIELD_NUMBER: _ClassVar[int]
        BF_POW_FIELD_NUMBER: _ClassVar[int]
        BF_SHOT_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        MAIN_LV_LIMIT_FIELD_NUMBER: _ClassVar[int]
        USE_HEROINE_NUM_FIELD_NUMBER: _ClassVar[int]
        USE_VALUABLE_NUM_FIELD_NUMBER: _ClassVar[int]
        af_life: int
        af_main_lv: int
        af_pow: float
        af_shot: int
        bf_life: int
        bf_main_lv: int
        bf_pow: float
        bf_shot: int
        common: EventSchema.Common
        get_item_id: str
        get_item_num: str
        heroine_id: int
        heroine_skill_id: int
        instance_id: int
        main_lv_limit: int
        use_heroine_num: int
        use_valuable_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., heroine_id: _Optional[int] = ..., instance_id: _Optional[int] = ..., bf_main_lv: _Optional[int] = ..., af_main_lv: _Optional[int] = ..., main_lv_limit: _Optional[int] = ..., bf_shot: _Optional[int] = ..., af_shot: _Optional[int] = ..., bf_life: _Optional[int] = ..., af_life: _Optional[int] = ..., bf_pow: _Optional[float] = ..., af_pow: _Optional[float] = ..., use_valuable_num: _Optional[int] = ..., use_heroine_num: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., heroine_skill_id: _Optional[int] = ...) -> None: ...
    class HeroineTrade(_message.Message):
        __slots__ = ["co_bonus", "common", "em_bonus", "get_heroine_lv", "heroine_id", "heroine_skill_id", "instance_id", "life", "origin_co_bonus", "origin_em_bonus", "origin_life", "origin_ro_bonus", "origin_shot", "patern_id", "ro_bonus", "shot", "trade_count_limit", "trade_flag", "trade_limit_date", "trade_limit_remain", "use_heroine_num", "use_valuable_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CO_BONUS_FIELD_NUMBER: _ClassVar[int]
        EM_BONUS_FIELD_NUMBER: _ClassVar[int]
        GET_HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        LIFE_FIELD_NUMBER: _ClassVar[int]
        ORIGIN_CO_BONUS_FIELD_NUMBER: _ClassVar[int]
        ORIGIN_EM_BONUS_FIELD_NUMBER: _ClassVar[int]
        ORIGIN_LIFE_FIELD_NUMBER: _ClassVar[int]
        ORIGIN_RO_BONUS_FIELD_NUMBER: _ClassVar[int]
        ORIGIN_SHOT_FIELD_NUMBER: _ClassVar[int]
        PATERN_ID_FIELD_NUMBER: _ClassVar[int]
        RO_BONUS_FIELD_NUMBER: _ClassVar[int]
        SHOT_FIELD_NUMBER: _ClassVar[int]
        TRADE_COUNT_LIMIT_FIELD_NUMBER: _ClassVar[int]
        TRADE_FLAG_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_DATE_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_REMAIN_FIELD_NUMBER: _ClassVar[int]
        USE_HEROINE_NUM_FIELD_NUMBER: _ClassVar[int]
        USE_VALUABLE_NUM_FIELD_NUMBER: _ClassVar[int]
        co_bonus: float
        common: EventSchema.Common
        em_bonus: float
        get_heroine_lv: int
        heroine_id: int
        heroine_skill_id: int
        instance_id: int
        life: int
        origin_co_bonus: float
        origin_em_bonus: float
        origin_life: int
        origin_ro_bonus: float
        origin_shot: int
        patern_id: int
        ro_bonus: float
        shot: int
        trade_count_limit: int
        trade_flag: int
        trade_limit_date: int
        trade_limit_remain: int
        use_heroine_num: int
        use_valuable_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., heroine_id: _Optional[int] = ..., instance_id: _Optional[int] = ..., use_valuable_num: _Optional[int] = ..., use_heroine_num: _Optional[int] = ..., trade_limit_date: _Optional[int] = ..., trade_limit_remain: _Optional[int] = ..., trade_count_limit: _Optional[int] = ..., get_heroine_lv: _Optional[int] = ..., life: _Optional[int] = ..., shot: _Optional[int] = ..., em_bonus: _Optional[float] = ..., ro_bonus: _Optional[float] = ..., co_bonus: _Optional[float] = ..., origin_life: _Optional[int] = ..., origin_shot: _Optional[int] = ..., origin_em_bonus: _Optional[float] = ..., origin_ro_bonus: _Optional[float] = ..., origin_co_bonus: _Optional[float] = ..., heroine_skill_id: _Optional[int] = ..., trade_flag: _Optional[int] = ..., patern_id: _Optional[int] = ...) -> None: ...
    class KaguraPass(_message.Message):
        __slots__ = ["af_kagura_point", "common", "elapsed_date", "kagura_point", "kagura_tier", "last_tier", "odekake_session_id", "season_end", "session_id", "tier_limite_flag", "transaction_id"]
        AF_KAGURA_POINT_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        ELAPSED_DATE_FIELD_NUMBER: _ClassVar[int]
        KAGURA_POINT_FIELD_NUMBER: _ClassVar[int]
        KAGURA_TIER_FIELD_NUMBER: _ClassVar[int]
        LAST_TIER_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SEASON_END_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        TIER_LIMITE_FLAG_FIELD_NUMBER: _ClassVar[int]
        TRANSACTION_ID_FIELD_NUMBER: _ClassVar[int]
        af_kagura_point: int
        common: EventSchema.Common
        elapsed_date: int
        kagura_point: int
        kagura_tier: int
        last_tier: int
        odekake_session_id: int
        season_end: str
        session_id: str
        tier_limite_flag: int
        transaction_id: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., kagura_point: _Optional[int] = ..., af_kagura_point: _Optional[int] = ..., kagura_tier: _Optional[int] = ..., last_tier: _Optional[int] = ..., elapsed_date: _Optional[int] = ..., tier_limite_flag: _Optional[int] = ..., season_end: _Optional[str] = ..., session_id: _Optional[str] = ..., odekake_session_id: _Optional[int] = ..., transaction_id: _Optional[str] = ...) -> None: ...
    class KaguraSetting(_message.Message):
        __slots__ = ["attack_notes", "boss_anime", "boss_atack_option", "common", "dannmaku_effect", "dannmaku_volume", "dimmer", "effect_volume", "kagura_effect_cut_in_option", "mitama_burst", "mitama_burst_cut_in_option", "music_volume", "notes_design", "notes_effect", "notes_size_option", "notes_speed", "notes_timing", "rhythm_line", "shikikaku_option", "touch_score_option", "touch_se", "touch_volume", "vibration_flag", "voice_volume"]
        ATTACK_NOTES_FIELD_NUMBER: _ClassVar[int]
        BOSS_ANIME_FIELD_NUMBER: _ClassVar[int]
        BOSS_ATACK_OPTION_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DANNMAKU_EFFECT_FIELD_NUMBER: _ClassVar[int]
        DANNMAKU_VOLUME_FIELD_NUMBER: _ClassVar[int]
        DIMMER_FIELD_NUMBER: _ClassVar[int]
        EFFECT_VOLUME_FIELD_NUMBER: _ClassVar[int]
        KAGURA_EFFECT_CUT_IN_OPTION_FIELD_NUMBER: _ClassVar[int]
        MITAMA_BURST_CUT_IN_OPTION_FIELD_NUMBER: _ClassVar[int]
        MITAMA_BURST_FIELD_NUMBER: _ClassVar[int]
        MUSIC_VOLUME_FIELD_NUMBER: _ClassVar[int]
        NOTES_DESIGN_FIELD_NUMBER: _ClassVar[int]
        NOTES_EFFECT_FIELD_NUMBER: _ClassVar[int]
        NOTES_SIZE_OPTION_FIELD_NUMBER: _ClassVar[int]
        NOTES_SPEED_FIELD_NUMBER: _ClassVar[int]
        NOTES_TIMING_FIELD_NUMBER: _ClassVar[int]
        RHYTHM_LINE_FIELD_NUMBER: _ClassVar[int]
        SHIKIKAKU_OPTION_FIELD_NUMBER: _ClassVar[int]
        TOUCH_SCORE_OPTION_FIELD_NUMBER: _ClassVar[int]
        TOUCH_SE_FIELD_NUMBER: _ClassVar[int]
        TOUCH_VOLUME_FIELD_NUMBER: _ClassVar[int]
        VIBRATION_FLAG_FIELD_NUMBER: _ClassVar[int]
        VOICE_VOLUME_FIELD_NUMBER: _ClassVar[int]
        attack_notes: int
        boss_anime: int
        boss_atack_option: int
        common: EventSchema.Common
        dannmaku_effect: int
        dannmaku_volume: int
        dimmer: int
        effect_volume: int
        kagura_effect_cut_in_option: int
        mitama_burst: int
        mitama_burst_cut_in_option: int
        music_volume: int
        notes_design: int
        notes_effect: int
        notes_size_option: int
        notes_speed: int
        notes_timing: int
        rhythm_line: int
        shikikaku_option: int
        touch_score_option: int
        touch_se: int
        touch_volume: int
        vibration_flag: int
        voice_volume: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., notes_speed: _Optional[int] = ..., notes_timing: _Optional[int] = ..., vibration_flag: _Optional[int] = ..., touch_se: _Optional[int] = ..., notes_design: _Optional[int] = ..., notes_effect: _Optional[int] = ..., boss_anime: _Optional[int] = ..., mitama_burst: _Optional[int] = ..., attack_notes: _Optional[int] = ..., rhythm_line: _Optional[int] = ..., dannmaku_effect: _Optional[int] = ..., dimmer: _Optional[int] = ..., music_volume: _Optional[int] = ..., touch_volume: _Optional[int] = ..., dannmaku_volume: _Optional[int] = ..., effect_volume: _Optional[int] = ..., voice_volume: _Optional[int] = ..., boss_atack_option: _Optional[int] = ..., notes_size_option: _Optional[int] = ..., touch_score_option: _Optional[int] = ..., mitama_burst_cut_in_option: _Optional[int] = ..., kagura_effect_cut_in_option: _Optional[int] = ..., shikikaku_option: _Optional[int] = ...) -> None: ...
    class LoginBonus(_message.Message):
        __slots__ = ["af_bingo_line", "bf_bingo_line", "bingo_id", "bingo_item_id", "bingo_item_num", "bonus_type_id", "common", "elapsed_time", "filled_cell", "item_id", "item_num", "reach_num"]
        AF_BINGO_LINE_FIELD_NUMBER: _ClassVar[int]
        BF_BINGO_LINE_FIELD_NUMBER: _ClassVar[int]
        BINGO_ID_FIELD_NUMBER: _ClassVar[int]
        BINGO_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        BINGO_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        BONUS_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        ELAPSED_TIME_FIELD_NUMBER: _ClassVar[int]
        FILLED_CELL_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        REACH_NUM_FIELD_NUMBER: _ClassVar[int]
        af_bingo_line: int
        bf_bingo_line: int
        bingo_id: int
        bingo_item_id: str
        bingo_item_num: str
        bonus_type_id: int
        common: EventSchema.Common
        elapsed_time: int
        filled_cell: int
        item_id: str
        item_num: str
        reach_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bingo_id: _Optional[int] = ..., item_id: _Optional[str] = ..., item_num: _Optional[str] = ..., filled_cell: _Optional[int] = ..., reach_num: _Optional[int] = ..., bf_bingo_line: _Optional[int] = ..., af_bingo_line: _Optional[int] = ..., bingo_item_id: _Optional[str] = ..., bingo_item_num: _Optional[str] = ..., bonus_type_id: _Optional[int] = ..., elapsed_time: _Optional[int] = ...) -> None: ...
    class MapGridExpand(_message.Message):
        __slots__ = ["common", "coordinate_id", "use_item_id", "use_item_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        coordinate_id: int
        use_item_id: str
        use_item_num: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., coordinate_id: _Optional[int] = ..., use_item_id: _Optional[str] = ..., use_item_num: _Optional[str] = ...) -> None: ...
    class MapSpotConstruction(_message.Message):
        __slots__ = ["area_flag", "common", "construct_time", "coordinate_id", "place_spot_id", "recomend_flag"]
        AREA_FLAG_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CONSTRUCT_TIME_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        PLACE_SPOT_ID_FIELD_NUMBER: _ClassVar[int]
        RECOMEND_FLAG_FIELD_NUMBER: _ClassVar[int]
        area_flag: int
        common: EventSchema.Common
        construct_time: int
        coordinate_id: int
        place_spot_id: int
        recomend_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., area_flag: _Optional[int] = ..., coordinate_id: _Optional[int] = ..., place_spot_id: _Optional[int] = ..., recomend_flag: _Optional[int] = ..., construct_time: _Optional[int] = ...) -> None: ...
    class MapSpotSet(_message.Message):
        __slots__ = ["auto_flag", "common", "coordinate_id", "place_spot_id"]
        AUTO_FLAG_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        PLACE_SPOT_ID_FIELD_NUMBER: _ClassVar[int]
        auto_flag: int
        common: EventSchema.Common
        coordinate_id: str
        place_spot_id: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., coordinate_id: _Optional[str] = ..., place_spot_id: _Optional[str] = ..., auto_flag: _Optional[int] = ...) -> None: ...
    class Mission(_message.Message):
        __slots__ = ["common", "get_item_id", "get_item_num", "mission_id", "mission_type_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        MISSION_ID_FIELD_NUMBER: _ClassVar[int]
        MISSION_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        get_item_id: str
        get_item_num: str
        mission_id: int
        mission_type_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., mission_type_id: _Optional[int] = ..., mission_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ...) -> None: ...
    class MissionClub(_message.Message):
        __slots__ = ["club_point_balance", "club_point_num", "common", "get_item_id", "get_item_num", "mission_id", "mission_type_id"]
        CLUB_POINT_BALANCE_FIELD_NUMBER: _ClassVar[int]
        CLUB_POINT_NUM_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        MISSION_ID_FIELD_NUMBER: _ClassVar[int]
        MISSION_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        club_point_balance: int
        club_point_num: int
        common: EventSchema.Common
        get_item_id: str
        get_item_num: str
        mission_id: int
        mission_type_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., mission_type_id: _Optional[int] = ..., mission_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., club_point_num: _Optional[int] = ..., club_point_balance: _Optional[int] = ...) -> None: ...
    class MissionEvent(_message.Message):
        __slots__ = ["common", "event_coin_id", "event_coin_num", "event_id", "get_item_id", "get_item_num", "mission_id", "mission_type_id", "page_num", "special_flag", "stamp_item_id", "stamp_item_num", "stamp_max", "stamp_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EVENT_COIN_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_COIN_NUM_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        MISSION_ID_FIELD_NUMBER: _ClassVar[int]
        MISSION_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        PAGE_NUM_FIELD_NUMBER: _ClassVar[int]
        SPECIAL_FLAG_FIELD_NUMBER: _ClassVar[int]
        STAMP_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        STAMP_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        STAMP_MAX_FIELD_NUMBER: _ClassVar[int]
        STAMP_NUM_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        event_coin_id: int
        event_coin_num: int
        event_id: int
        get_item_id: str
        get_item_num: str
        mission_id: int
        mission_type_id: int
        page_num: int
        special_flag: int
        stamp_item_id: str
        stamp_item_num: str
        stamp_max: int
        stamp_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., mission_type_id: _Optional[int] = ..., mission_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., event_coin_id: _Optional[int] = ..., event_coin_num: _Optional[int] = ..., stamp_num: _Optional[int] = ..., stamp_max: _Optional[int] = ..., stamp_item_id: _Optional[str] = ..., stamp_item_num: _Optional[str] = ..., page_num: _Optional[int] = ..., special_flag: _Optional[int] = ..., event_id: _Optional[int] = ...) -> None: ...
    class MissionRaid(_message.Message):
        __slots__ = ["common", "event_coin_id", "event_id", "get_event_coin", "get_item_id", "get_item_num", "mission_id", "mission_type_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EVENT_COIN_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_COIN_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        MISSION_ID_FIELD_NUMBER: _ClassVar[int]
        MISSION_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        event_coin_id: int
        event_id: int
        get_event_coin: int
        get_item_id: str
        get_item_num: str
        mission_id: int
        mission_type_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., mission_type_id: _Optional[int] = ..., mission_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., event_coin_id: _Optional[int] = ..., get_event_coin: _Optional[int] = ..., event_id: _Optional[int] = ...) -> None: ...
    class MissionStageEnd(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill", "active_skill_id", "active_skill_t", "af_high_score_rate", "af_nakayoshi_lv", "af_nakayoshi_pt", "auto_active_flag", "auto_mode_flag", "ave_fps", "best_defeat_time", "bf_high_score_rate", "bomb_num", "bomb_time", "boost_ratio", "boost_reward_ratio", "boss_atack_option", "boss_damage", "boss_hp", "boss_id", "boss_target", "burst_skill", "burst_skill_id", "burst_skill_t", "card_id", "card_level", "clear_danmaku", "clear_mission_id", "combo_num", "combo_target", "common", "continue_num", "daily_bonus_flag", "danmaku_flag", "danmaku_id", "deck_id", "defeat_time", "detailed_combo", "detailed_notes", "detailed_score_adjust", "detailed_score_base", "detailed_score_up_bonus", "difficulty", "dream_point", "drop_item_id", "drop_item_num", "event_bonus_point", "event_coin_id", "event_id", "event_point_id", "full_combo_flag", "gage_bonus", "get_card_exp", "get_event_coin", "get_event_point", "get_nakayoshi_pt", "get_point_charm", "get_power_charm", "get_user_exp", "heroine_id", "heroine_lv", "high_score", "life_result", "low_fps", "max_damage", "miss_num", "miss_time", "music_id", "mv_flag", "new_full_combo", "new_p_full_combo", "new_score_rank", "notes", "notes_size_option", "oiginal_event_point", "original_event_point", "passive_skill", "passive_skill_id", "passive_skill_t", "private_score_ranking", "rank_bonus_point", "rehearsal_flag", "remaint_boost", "result", "retry_life", "retry_self", "score", "score_rank", "score_target", "session_id", "skip_ticket_num", "spell_break_flag", "spell_card_id", "spell_card_place_id", "start_t", "total_score_ranking", "ttl_event_point", "unlock_bgm_flag", "unlock_bgm_id", "use_boost"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        AF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        AUTO_ACTIVE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AVE_FPS_FIELD_NUMBER: _ClassVar[int]
        BEST_DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        BF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        BOMB_NUM_FIELD_NUMBER: _ClassVar[int]
        BOMB_TIME_FIELD_NUMBER: _ClassVar[int]
        BOOST_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOSS_ATACK_OPTION_FIELD_NUMBER: _ClassVar[int]
        BOSS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        BOSS_HP_FIELD_NUMBER: _ClassVar[int]
        BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        BOSS_TARGET_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CLEAR_DANMAKU_FIELD_NUMBER: _ClassVar[int]
        CLEAR_MISSION_ID_FIELD_NUMBER: _ClassVar[int]
        COMBO_NUM_FIELD_NUMBER: _ClassVar[int]
        COMBO_TARGET_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_NUM_FIELD_NUMBER: _ClassVar[int]
        DAILY_BONUS_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_ID_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        DETAILED_COMBO_FIELD_NUMBER: _ClassVar[int]
        DETAILED_NOTES_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_ADJUST_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_BASE_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_UP_BONUS_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        DREAM_POINT_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        EVENT_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        EVENT_COIN_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_POINT_ID_FIELD_NUMBER: _ClassVar[int]
        FULL_COMBO_FLAG_FIELD_NUMBER: _ClassVar[int]
        GAGE_BONUS_FIELD_NUMBER: _ClassVar[int]
        GET_CARD_EXP_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_COIN_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        GET_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        GET_POINT_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_POWER_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_USER_EXP_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_FIELD_NUMBER: _ClassVar[int]
        LIFE_RESULT_FIELD_NUMBER: _ClassVar[int]
        LOW_FPS_FIELD_NUMBER: _ClassVar[int]
        MAX_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        MISS_NUM_FIELD_NUMBER: _ClassVar[int]
        MISS_TIME_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        MV_FLAG_FIELD_NUMBER: _ClassVar[int]
        NEW_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_P_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        NOTES_FIELD_NUMBER: _ClassVar[int]
        NOTES_SIZE_OPTION_FIELD_NUMBER: _ClassVar[int]
        OIGINAL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        ORIGINAL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        PRIVATE_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        RANK_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        REHEARSAL_FLAG_FIELD_NUMBER: _ClassVar[int]
        REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        RESULT_FIELD_NUMBER: _ClassVar[int]
        RETRY_LIFE_FIELD_NUMBER: _ClassVar[int]
        RETRY_SELF_FIELD_NUMBER: _ClassVar[int]
        SCORE_FIELD_NUMBER: _ClassVar[int]
        SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        SCORE_TARGET_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SKIP_TICKET_NUM_FIELD_NUMBER: _ClassVar[int]
        SPELL_BREAK_FLAG_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_ID_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        START_T_FIELD_NUMBER: _ClassVar[int]
        TOTAL_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        TTL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_FLAG_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill: int
        active_skill_id: str
        active_skill_t: float
        af_high_score_rate: int
        af_nakayoshi_lv: int
        af_nakayoshi_pt: int
        auto_active_flag: int
        auto_mode_flag: int
        ave_fps: int
        best_defeat_time: int
        bf_high_score_rate: int
        bomb_num: int
        bomb_time: str
        boost_ratio: int
        boost_reward_ratio: int
        boss_atack_option: int
        boss_damage: int
        boss_hp: int
        boss_id: int
        boss_target: int
        burst_skill: int
        burst_skill_id: str
        burst_skill_t: float
        card_id: str
        card_level: str
        clear_danmaku: int
        clear_mission_id: str
        combo_num: int
        combo_target: int
        common: EventSchema.Common
        continue_num: int
        daily_bonus_flag: int
        danmaku_flag: int
        danmaku_id: int
        deck_id: int
        defeat_time: int
        detailed_combo: str
        detailed_notes: str
        detailed_score_adjust: str
        detailed_score_base: str
        detailed_score_up_bonus: str
        difficulty: int
        dream_point: int
        drop_item_id: str
        drop_item_num: str
        event_bonus_point: int
        event_coin_id: int
        event_id: int
        event_point_id: int
        full_combo_flag: int
        gage_bonus: int
        get_card_exp: int
        get_event_coin: int
        get_event_point: int
        get_nakayoshi_pt: int
        get_point_charm: int
        get_power_charm: int
        get_user_exp: int
        heroine_id: str
        heroine_lv: str
        high_score: int
        life_result: int
        low_fps: int
        max_damage: int
        miss_num: int
        miss_time: str
        music_id: int
        mv_flag: int
        new_full_combo: int
        new_p_full_combo: int
        new_score_rank: int
        notes: str
        notes_size_option: int
        oiginal_event_point: int
        original_event_point: int
        passive_skill: int
        passive_skill_id: str
        passive_skill_t: float
        private_score_ranking: int
        rank_bonus_point: int
        rehearsal_flag: int
        remaint_boost: int
        result: int
        retry_life: int
        retry_self: int
        score: int
        score_rank: int
        score_target: int
        session_id: str
        skip_ticket_num: int
        spell_break_flag: int
        spell_card_id: int
        spell_card_place_id: int
        start_t: int
        total_score_ranking: int
        ttl_event_point: int
        unlock_bgm_flag: int
        unlock_bgm_id: int
        use_boost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., music_id: _Optional[int] = ..., mv_flag: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., skip_ticket_num: _Optional[int] = ..., rehearsal_flag: _Optional[int] = ..., spell_break_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., life_result: _Optional[int] = ..., start_t: _Optional[int] = ..., deck_id: _Optional[int] = ..., score: _Optional[int] = ..., high_score: _Optional[int] = ..., bf_high_score_rate: _Optional[int] = ..., af_high_score_rate: _Optional[int] = ..., private_score_ranking: _Optional[int] = ..., total_score_ranking: _Optional[int] = ..., score_rank: _Optional[int] = ..., new_score_rank: _Optional[int] = ..., combo_num: _Optional[int] = ..., full_combo_flag: _Optional[int] = ..., new_full_combo: _Optional[int] = ..., new_p_full_combo: _Optional[int] = ..., auto_active_flag: _Optional[int] = ..., active_skill: _Optional[int] = ..., active_skill_t: _Optional[float] = ..., active_skill_id: _Optional[str] = ..., passive_skill: _Optional[int] = ..., passive_skill_t: _Optional[float] = ..., passive_skill_id: _Optional[str] = ..., spell_card_id: _Optional[int] = ..., spell_card_place_id: _Optional[int] = ..., boss_id: _Optional[int] = ..., boss_hp: _Optional[int] = ..., boss_damage: _Optional[int] = ..., max_damage: _Optional[int] = ..., defeat_time: _Optional[int] = ..., best_defeat_time: _Optional[int] = ..., get_user_exp: _Optional[int] = ..., drop_item_id: _Optional[str] = ..., drop_item_num: _Optional[str] = ..., ave_fps: _Optional[int] = ..., low_fps: _Optional[int] = ..., boost_reward_ratio: _Optional[int] = ..., dream_point: _Optional[int] = ..., card_id: _Optional[str] = ..., get_card_exp: _Optional[int] = ..., card_level: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., get_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_lv: _Optional[int] = ..., notes: _Optional[str] = ..., score_target: _Optional[int] = ..., combo_target: _Optional[int] = ..., boss_target: _Optional[int] = ..., daily_bonus_flag: _Optional[int] = ..., danmaku_flag: _Optional[int] = ..., danmaku_id: _Optional[int] = ..., get_point_charm: _Optional[int] = ..., get_power_charm: _Optional[int] = ..., miss_num: _Optional[int] = ..., miss_time: _Optional[str] = ..., bomb_num: _Optional[int] = ..., bomb_time: _Optional[str] = ..., clear_danmaku: _Optional[int] = ..., boost_ratio: _Optional[int] = ..., remaint_boost: _Optional[int] = ..., use_boost: _Optional[int] = ..., event_id: _Optional[int] = ..., event_point_id: _Optional[int] = ..., event_coin_id: _Optional[int] = ..., get_event_coin: _Optional[int] = ..., get_event_point: _Optional[int] = ..., oiginal_event_point: _Optional[int] = ..., rank_bonus_point: _Optional[int] = ..., event_bonus_point: _Optional[int] = ..., gage_bonus: _Optional[int] = ..., ttl_event_point: _Optional[int] = ..., clear_mission_id: _Optional[str] = ..., original_event_point: _Optional[int] = ..., result: _Optional[int] = ..., continue_num: _Optional[int] = ..., retry_self: _Optional[int] = ..., retry_life: _Optional[int] = ..., detailed_notes: _Optional[str] = ..., boss_atack_option: _Optional[int] = ..., notes_size_option: _Optional[int] = ..., detailed_score_base: _Optional[str] = ..., detailed_combo: _Optional[str] = ..., detailed_score_up_bonus: _Optional[str] = ..., detailed_score_adjust: _Optional[str] = ..., unlock_bgm_flag: _Optional[int] = ..., unlock_bgm_id: _Optional[int] = ..., burst_skill: _Optional[int] = ..., burst_skill_t: _Optional[float] = ..., burst_skill_id: _Optional[str] = ..., **kwargs) -> None: ...
    class MissionStageStart(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill_id", "active_skill_level", "attribute", "auto_mode_flag", "bf_nakayoshi_lv", "bf_nakayoshi_pt", "bluetooth_flag", "bonus_music_flag", "boss_effect_flag", "burst_skill_id", "burst_skill_level", "card_deepen", "card_flowering", "card_id", "card_level", "card_para_total", "card_rarity", "card_skill_level", "card_type_id", "common", "deck_id", "difficulty", "event_id", "expected_score_rank", "first_difficulty_flag", "first_music_flag", "flowering_lv_bonus", "heroine_bonus", "heroine_id", "heroine_lv", "heroine_skill", "heroine_skill_bonus", "mode", "music_id", "notes_speed", "notes_timing", "para_total", "passive_skill_boost", "passive_skill_id", "passive_skill_level", "rhythm_effect_flag", "session_id", "total_para_co", "total_para_em", "total_para_life", "total_para_ro", "total_para_shot", "type_fit_bonus", "vibration_flag"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        ATTRIBUTE_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        BLUETOOTH_FLAG_FIELD_NUMBER: _ClassVar[int]
        BONUS_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        BOSS_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        CARD_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        CARD_RARITY_FIELD_NUMBER: _ClassVar[int]
        CARD_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EXPECTED_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        FIRST_DIFFICULTY_FLAG_FIELD_NUMBER: _ClassVar[int]
        FIRST_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_LV_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_FIELD_NUMBER: _ClassVar[int]
        MODE_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        NOTES_SPEED_FIELD_NUMBER: _ClassVar[int]
        NOTES_TIMING_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_BOOST_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        RHYTHM_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_LIFE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_SHOT_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIT_BONUS_FIELD_NUMBER: _ClassVar[int]
        VIBRATION_FLAG_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill_id: str
        active_skill_level: str
        attribute: int
        auto_mode_flag: int
        bf_nakayoshi_lv: int
        bf_nakayoshi_pt: int
        bluetooth_flag: int
        bonus_music_flag: int
        boss_effect_flag: int
        burst_skill_id: str
        burst_skill_level: str
        card_deepen: str
        card_flowering: str
        card_id: str
        card_level: str
        card_para_total: int
        card_rarity: str
        card_skill_level: str
        card_type_id: str
        common: EventSchema.Common
        deck_id: int
        difficulty: int
        event_id: int
        expected_score_rank: int
        first_difficulty_flag: int
        first_music_flag: int
        flowering_lv_bonus: int
        heroine_bonus: int
        heroine_id: str
        heroine_lv: str
        heroine_skill: str
        heroine_skill_bonus: int
        mode: int
        music_id: int
        notes_speed: int
        notes_timing: int
        para_total: int
        passive_skill_boost: str
        passive_skill_id: str
        passive_skill_level: str
        rhythm_effect_flag: int
        session_id: str
        total_para_co: int
        total_para_em: int
        total_para_life: int
        total_para_ro: int
        total_para_shot: int
        type_fit_bonus: int
        vibration_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., notes_speed: _Optional[int] = ..., notes_timing: _Optional[int] = ..., vibration_flag: _Optional[int] = ..., bluetooth_flag: _Optional[int] = ..., music_id: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., first_music_flag: _Optional[int] = ..., first_difficulty_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., mode: _Optional[int] = ..., attribute: _Optional[int] = ..., boss_effect_flag: _Optional[int] = ..., rhythm_effect_flag: _Optional[int] = ..., deck_id: _Optional[int] = ..., card_id: _Optional[str] = ..., card_type_id: _Optional[str] = ..., card_level: _Optional[str] = ..., card_skill_level: _Optional[str] = ..., active_skill_id: _Optional[str] = ..., passive_skill_id: _Optional[str] = ..., card_rarity: _Optional[str] = ..., card_flowering: _Optional[str] = ..., card_deepen: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., heroine_skill: _Optional[str] = ..., bf_nakayoshi_pt: _Optional[int] = ..., bf_nakayoshi_lv: _Optional[int] = ..., total_para_life: _Optional[int] = ..., total_para_shot: _Optional[int] = ..., para_total: _Optional[int] = ..., total_para_em: _Optional[int] = ..., total_para_co: _Optional[int] = ..., total_para_ro: _Optional[int] = ..., card_para_total: _Optional[int] = ..., flowering_lv_bonus: _Optional[int] = ..., type_fit_bonus: _Optional[int] = ..., heroine_bonus: _Optional[int] = ..., heroine_skill_bonus: _Optional[int] = ..., expected_score_rank: _Optional[int] = ..., event_id: _Optional[int] = ..., bonus_music_flag: _Optional[int] = ..., passive_skill_boost: _Optional[str] = ..., burst_skill_id: _Optional[str] = ..., active_skill_level: _Optional[str] = ..., passive_skill_level: _Optional[str] = ..., burst_skill_level: _Optional[str] = ...) -> None: ...
    class MySpaceDelete(_message.Message):
        __slots__ = ["char_id", "common", "coordinate_id", "my_set_name", "my_set_num", "object_symbol_id", "theme_id", "use_cost"]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        MY_SET_NAME_FIELD_NUMBER: _ClassVar[int]
        MY_SET_NUM_FIELD_NUMBER: _ClassVar[int]
        OBJECT_SYMBOL_ID_FIELD_NUMBER: _ClassVar[int]
        THEME_ID_FIELD_NUMBER: _ClassVar[int]
        USE_COST_FIELD_NUMBER: _ClassVar[int]
        char_id: str
        common: EventSchema.Common
        coordinate_id: str
        my_set_name: str
        my_set_num: int
        object_symbol_id: str
        theme_id: int
        use_cost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., object_symbol_id: _Optional[str] = ..., coordinate_id: _Optional[str] = ..., use_cost: _Optional[int] = ..., theme_id: _Optional[int] = ..., char_id: _Optional[str] = ..., my_set_num: _Optional[int] = ..., my_set_name: _Optional[str] = ...) -> None: ...
    class MySpaceEdit(_message.Message):
        __slots__ = ["bgm_id", "char_id", "common", "coordinate_id", "object_symbol_id", "theme_id", "use_cost"]
        BGM_ID_FIELD_NUMBER: _ClassVar[int]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        OBJECT_SYMBOL_ID_FIELD_NUMBER: _ClassVar[int]
        THEME_ID_FIELD_NUMBER: _ClassVar[int]
        USE_COST_FIELD_NUMBER: _ClassVar[int]
        bgm_id: int
        char_id: str
        common: EventSchema.Common
        coordinate_id: str
        object_symbol_id: str
        theme_id: int
        use_cost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., object_symbol_id: _Optional[str] = ..., coordinate_id: _Optional[str] = ..., use_cost: _Optional[int] = ..., theme_id: _Optional[int] = ..., char_id: _Optional[str] = ..., bgm_id: _Optional[int] = ...) -> None: ...
    class MySpacePhoto(_message.Message):
        __slots__ = ["common"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ...) -> None: ...
    class MySpaceSet(_message.Message):
        __slots__ = ["char_id", "common", "coordinate_id", "my_set_name", "my_set_num", "object_symbol_id", "theme_id", "use_cost"]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        MY_SET_NAME_FIELD_NUMBER: _ClassVar[int]
        MY_SET_NUM_FIELD_NUMBER: _ClassVar[int]
        OBJECT_SYMBOL_ID_FIELD_NUMBER: _ClassVar[int]
        THEME_ID_FIELD_NUMBER: _ClassVar[int]
        USE_COST_FIELD_NUMBER: _ClassVar[int]
        char_id: str
        common: EventSchema.Common
        coordinate_id: str
        my_set_name: str
        my_set_num: int
        object_symbol_id: str
        theme_id: int
        use_cost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., object_symbol_id: _Optional[str] = ..., coordinate_id: _Optional[str] = ..., use_cost: _Optional[int] = ..., theme_id: _Optional[int] = ..., char_id: _Optional[str] = ..., my_set_num: _Optional[int] = ..., my_set_name: _Optional[str] = ...) -> None: ...
    class MySpaceVisit(_message.Message):
        __slots__ = ["char_id", "common", "coordinate_id", "object_symbol_id", "set_owner", "space_total_like", "theme_id", "use_cost", "visit_flag"]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        COORDINATE_ID_FIELD_NUMBER: _ClassVar[int]
        OBJECT_SYMBOL_ID_FIELD_NUMBER: _ClassVar[int]
        SET_OWNER_FIELD_NUMBER: _ClassVar[int]
        SPACE_TOTAL_LIKE_FIELD_NUMBER: _ClassVar[int]
        THEME_ID_FIELD_NUMBER: _ClassVar[int]
        USE_COST_FIELD_NUMBER: _ClassVar[int]
        VISIT_FLAG_FIELD_NUMBER: _ClassVar[int]
        char_id: str
        common: EventSchema.Common
        coordinate_id: str
        object_symbol_id: str
        set_owner: str
        space_total_like: int
        theme_id: int
        use_cost: int
        visit_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., visit_flag: _Optional[int] = ..., object_symbol_id: _Optional[str] = ..., coordinate_id: _Optional[str] = ..., use_cost: _Optional[int] = ..., theme_id: _Optional[int] = ..., char_id: _Optional[str] = ..., set_owner: _Optional[str] = ..., space_total_like: _Optional[int] = ...) -> None: ...
    class NakayoshiCrowd(_message.Message):
        __slots__ = ["common"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ...) -> None: ...
    class NameChange(_message.Message):
        __slots__ = ["af_name", "bf_name", "common"]
        AF_NAME_FIELD_NUMBER: _ClassVar[int]
        BF_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        af_name: str
        bf_name: str
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_name: _Optional[str] = ..., af_name: _Optional[str] = ...) -> None: ...
    class News(_message.Message):
        __slots__ = ["common", "important_flag", "news_id", "start_date"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        IMPORTANT_FLAG_FIELD_NUMBER: _ClassVar[int]
        NEWS_ID_FIELD_NUMBER: _ClassVar[int]
        START_DATE_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        important_flag: int
        news_id: int
        start_date: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., start_date: _Optional[str] = ..., important_flag: _Optional[int] = ..., news_id: _Optional[int] = ...) -> None: ...
    class OdekakeBoost(_message.Message):
        __slots__ = ["common", "free_vc", "odekake_current_time", "odekake_session_id", "odekake_update_time", "paid_vc", "timeboost_route"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        FREE_VC_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_CURRENT_TIME_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_UPDATE_TIME_FIELD_NUMBER: _ClassVar[int]
        PAID_VC_FIELD_NUMBER: _ClassVar[int]
        TIMEBOOST_ROUTE_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        free_vc: int
        odekake_current_time: int
        odekake_session_id: str
        odekake_update_time: int
        paid_vc: int
        timeboost_route: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., odekake_session_id: _Optional[str] = ..., timeboost_route: _Optional[int] = ..., free_vc: _Optional[int] = ..., paid_vc: _Optional[int] = ..., odekake_current_time: _Optional[int] = ..., odekake_update_time: _Optional[int] = ...) -> None: ...
    class OdekakeOrder(_message.Message):
        __slots__ = ["attack_target", "card_id", "card_lv", "card_para", "common", "event_id", "excellent_target", "frame_fit_bonus", "great_target", "heroine_bonus", "heroine_id", "heroine_lv", "heroine_skill_bonus", "heroine_skill_id", "odekake_appearance_id", "odekake_id", "odekake_limit", "odekake_real_time", "odekake_session_id", "odekake_skill_bonus", "odekake_skill_id", "odekake_skill_lv", "odekake_skilll_bonus", "odekake_time", "odekake_type_id", "para_total", "quest_fit_bonus", "quest_fit_bonus_number", "recomend_flag", "suggestion", "suggestion_card", "suggestion_event_bonus", "suggestion_heroine", "suggetion_id", "target_flag", "target_para", "use_boost"]
        ATTACK_TARGET_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LV_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EXCELLENT_TARGET_FIELD_NUMBER: _ClassVar[int]
        FRAME_FIT_BONUS_FIELD_NUMBER: _ClassVar[int]
        GREAT_TARGET_FIELD_NUMBER: _ClassVar[int]
        HEROINE_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_APPEARANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_LIMIT_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_REAL_TIME_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SKILLL_BONUS_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SKILL_BONUS_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SKILL_LV_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_TIME_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        QUEST_FIT_BONUS_FIELD_NUMBER: _ClassVar[int]
        QUEST_FIT_BONUS_NUMBER_FIELD_NUMBER: _ClassVar[int]
        RECOMEND_FLAG_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_CARD_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_EVENT_BONUS_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_FIELD_NUMBER: _ClassVar[int]
        SUGGESTION_HEROINE_FIELD_NUMBER: _ClassVar[int]
        SUGGETION_ID_FIELD_NUMBER: _ClassVar[int]
        TARGET_FLAG_FIELD_NUMBER: _ClassVar[int]
        TARGET_PARA_FIELD_NUMBER: _ClassVar[int]
        USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        attack_target: int
        card_id: str
        card_lv: str
        card_para: int
        common: EventSchema.Common
        event_id: int
        excellent_target: int
        frame_fit_bonus: int
        great_target: int
        heroine_bonus: int
        heroine_id: str
        heroine_lv: str
        heroine_skill_bonus: int
        heroine_skill_id: str
        odekake_appearance_id: int
        odekake_id: int
        odekake_limit: int
        odekake_real_time: int
        odekake_session_id: str
        odekake_skill_bonus: int
        odekake_skill_id: str
        odekake_skill_lv: str
        odekake_skilll_bonus: int
        odekake_time: int
        odekake_type_id: int
        para_total: int
        quest_fit_bonus: int
        quest_fit_bonus_number: str
        recomend_flag: int
        suggestion: int
        suggestion_card: int
        suggestion_event_bonus: int
        suggestion_heroine: int
        suggetion_id: str
        target_flag: int
        target_para: int
        use_boost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., odekake_session_id: _Optional[str] = ..., odekake_time: _Optional[int] = ..., odekake_real_time: _Optional[int] = ..., odekake_id: _Optional[int] = ..., suggetion_id: _Optional[str] = ..., odekake_type_id: _Optional[int] = ..., odekake_appearance_id: _Optional[int] = ..., event_id: _Optional[int] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., heroine_skill_id: _Optional[str] = ..., card_id: _Optional[str] = ..., card_lv: _Optional[str] = ..., odekake_skill_id: _Optional[str] = ..., odekake_skill_lv: _Optional[str] = ..., target_flag: _Optional[int] = ..., target_para: _Optional[int] = ..., great_target: _Optional[int] = ..., excellent_target: _Optional[int] = ..., para_total: _Optional[int] = ..., card_para: _Optional[int] = ..., frame_fit_bonus: _Optional[int] = ..., heroine_bonus: _Optional[int] = ..., heroine_skill_bonus: _Optional[int] = ..., odekake_skilll_bonus: _Optional[int] = ..., recomend_flag: _Optional[int] = ..., odekake_limit: _Optional[int] = ..., odekake_skill_bonus: _Optional[int] = ..., use_boost: _Optional[int] = ..., attack_target: _Optional[int] = ..., suggestion: _Optional[int] = ..., suggestion_heroine: _Optional[int] = ..., suggestion_card: _Optional[int] = ..., suggestion_event_bonus: _Optional[int] = ..., quest_fit_bonus: _Optional[int] = ..., quest_fit_bonus_number: _Optional[str] = ...) -> None: ...
    class OdekakeResult(_message.Message):
        __slots__ = ["boost_reward_ratio", "cancel_frag", "card_id", "card_level", "clear_mission_id", "common", "cp_boost_reward_ratio", "daily_bonus_flag", "episode_id", "event_bonus_point", "event_coin_id", "event_id", "event_point_id", "get_card_exp", "get_dream_point", "get_event_coin", "get_event_point", "get_item_id", "get_item_num", "get_quest_point", "get_user_exp", "heroine_id", "nakayoshi_pt", "odekake_appearance_id", "odekake_check_time", "odekake_id", "odekake_limit", "odekake_real_time", "odekake_session_id", "odekake_time", "odekake_type_id", "original_event_point", "quest_id", "quest_point_id", "raid_af_hp", "raid_bf_hp", "raid_bonus_damage", "raid_boost_bonus_point", "raid_boss_attack_damage", "raid_boss_bonus_point", "raid_boss_discover", "raid_boss_id", "raid_boss_instance_id", "raid_boss_lv", "raid_boss_max_hp", "raid_boss_status", "raid_help_boost_bonus_point", "raid_help_boost_reward_ratio", "raid_original_damage", "raid_remaint_boost", "raid_status", "raid_use_boost", "rank_bonus_point", "remain_limit", "remaint_boost", "result_bonus_point", "result_type", "ttl_event_point", "use_boost"]
        BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        CANCEL_FRAG_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CLEAR_MISSION_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CP_BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        DAILY_BONUS_FLAG_FIELD_NUMBER: _ClassVar[int]
        EPISODE_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        EVENT_COIN_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_POINT_ID_FIELD_NUMBER: _ClassVar[int]
        GET_CARD_EXP_FIELD_NUMBER: _ClassVar[int]
        GET_DREAM_POINT_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_COIN_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        GET_QUEST_POINT_FIELD_NUMBER: _ClassVar[int]
        GET_USER_EXP_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_APPEARANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_CHECK_TIME_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_LIMIT_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_REAL_TIME_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_TIME_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        ORIGINAL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        QUEST_ID_FIELD_NUMBER: _ClassVar[int]
        QUEST_POINT_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_AF_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BF_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BONUS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_BOOST_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ATTACK_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_DISCOVER_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_LV_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_MAX_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_STATUS_FIELD_NUMBER: _ClassVar[int]
        RAID_HELP_BOOST_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        RAID_HELP_BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        RAID_ORIGINAL_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        RAID_STATUS_FIELD_NUMBER: _ClassVar[int]
        RAID_USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        RANK_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        REMAIN_LIMIT_FIELD_NUMBER: _ClassVar[int]
        RESULT_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        RESULT_TYPE_FIELD_NUMBER: _ClassVar[int]
        TTL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        boost_reward_ratio: int
        cancel_frag: int
        card_id: str
        card_level: str
        clear_mission_id: str
        common: EventSchema.Common
        cp_boost_reward_ratio: int
        daily_bonus_flag: int
        episode_id: int
        event_bonus_point: int
        event_coin_id: int
        event_id: int
        event_point_id: int
        get_card_exp: int
        get_dream_point: int
        get_event_coin: int
        get_event_point: int
        get_item_id: str
        get_item_num: str
        get_quest_point: int
        get_user_exp: int
        heroine_id: str
        nakayoshi_pt: int
        odekake_appearance_id: int
        odekake_check_time: int
        odekake_id: int
        odekake_limit: int
        odekake_real_time: int
        odekake_session_id: str
        odekake_time: int
        odekake_type_id: int
        original_event_point: int
        quest_id: int
        quest_point_id: int
        raid_af_hp: int
        raid_bf_hp: int
        raid_bonus_damage: int
        raid_boost_bonus_point: int
        raid_boss_attack_damage: int
        raid_boss_bonus_point: int
        raid_boss_discover: int
        raid_boss_id: int
        raid_boss_instance_id: str
        raid_boss_lv: int
        raid_boss_max_hp: int
        raid_boss_status: int
        raid_help_boost_bonus_point: int
        raid_help_boost_reward_ratio: int
        raid_original_damage: int
        raid_remaint_boost: int
        raid_status: int
        raid_use_boost: int
        rank_bonus_point: int
        remain_limit: int
        remaint_boost: int
        result_bonus_point: int
        result_type: int
        ttl_event_point: int
        use_boost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., odekake_session_id: _Optional[str] = ..., cancel_frag: _Optional[int] = ..., result_type: _Optional[int] = ..., odekake_id: _Optional[int] = ..., odekake_type_id: _Optional[int] = ..., odekake_appearance_id: _Optional[int] = ..., heroine_id: _Optional[str] = ..., nakayoshi_pt: _Optional[int] = ..., card_id: _Optional[str] = ..., get_dream_point: _Optional[int] = ..., get_user_exp: _Optional[int] = ..., event_coin_id: _Optional[int] = ..., get_event_coin: _Optional[int] = ..., event_id: _Optional[int] = ..., event_point_id: _Optional[int] = ..., get_event_point: _Optional[int] = ..., original_event_point: _Optional[int] = ..., rank_bonus_point: _Optional[int] = ..., event_bonus_point: _Optional[int] = ..., result_bonus_point: _Optional[int] = ..., ttl_event_point: _Optional[int] = ..., episode_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., odekake_limit: _Optional[int] = ..., remain_limit: _Optional[int] = ..., boost_reward_ratio: _Optional[int] = ..., daily_bonus_flag: _Optional[int] = ..., odekake_time: _Optional[int] = ..., odekake_real_time: _Optional[int] = ..., odekake_check_time: _Optional[int] = ..., get_card_exp: _Optional[int] = ..., card_level: _Optional[str] = ..., clear_mission_id: _Optional[str] = ..., raid_boss_id: _Optional[int] = ..., raid_boss_instance_id: _Optional[str] = ..., raid_boss_lv: _Optional[int] = ..., raid_boss_max_hp: _Optional[int] = ..., raid_status: _Optional[int] = ..., raid_bf_hp: _Optional[int] = ..., raid_af_hp: _Optional[int] = ..., raid_boss_attack_damage: _Optional[int] = ..., raid_original_damage: _Optional[int] = ..., raid_bonus_damage: _Optional[int] = ..., raid_boss_status: _Optional[int] = ..., raid_boss_discover: _Optional[int] = ..., raid_boost_bonus_point: _Optional[int] = ..., raid_help_boost_bonus_point: _Optional[int] = ..., raid_boss_bonus_point: _Optional[int] = ..., raid_help_boost_reward_ratio: _Optional[int] = ..., raid_remaint_boost: _Optional[int] = ..., raid_use_boost: _Optional[int] = ..., remaint_boost: _Optional[int] = ..., use_boost: _Optional[int] = ..., cp_boost_reward_ratio: _Optional[int] = ..., quest_id: _Optional[int] = ..., quest_point_id: _Optional[int] = ..., get_quest_point: _Optional[int] = ...) -> None: ...
    class OdekakeUnlock(_message.Message):
        __slots__ = ["common", "event_id", "odekake_appearance_id", "odekake_id", "odekake_limit", "odekake_type_id", "place_id", "unlock_reason_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_APPEARANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_LIMIT_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_REASON_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        event_id: int
        odekake_appearance_id: int
        odekake_id: int
        odekake_limit: int
        odekake_type_id: int
        place_id: int
        unlock_reason_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., unlock_reason_id: _Optional[int] = ..., odekake_id: _Optional[int] = ..., odekake_type_id: _Optional[int] = ..., place_id: _Optional[int] = ..., odekake_limit: _Optional[int] = ..., odekake_appearance_id: _Optional[int] = ..., event_id: _Optional[int] = ...) -> None: ...
    class PartyEnd(_message.Message):
        __slots__ = ["coming_char_id", "common", "end_flag", "get_item_id", "get_item_num", "limit_time", "tap_num"]
        COMING_CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        END_FLAG_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        LIMIT_TIME_FIELD_NUMBER: _ClassVar[int]
        TAP_NUM_FIELD_NUMBER: _ClassVar[int]
        coming_char_id: str
        common: EventSchema.Common
        end_flag: int
        get_item_id: str
        get_item_num: str
        limit_time: int
        tap_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., coming_char_id: _Optional[str] = ..., tap_num: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., limit_time: _Optional[int] = ..., end_flag: _Optional[int] = ...) -> None: ...
    class PlayerIcon(_message.Message):
        __slots__ = ["af_icon_id", "bf_icon_id", "card_icon_flag", "common"]
        AF_ICON_ID_FIELD_NUMBER: _ClassVar[int]
        BF_ICON_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_ICON_FLAG_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        af_icon_id: int
        bf_icon_id: int
        card_icon_flag: int
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bf_icon_id: _Optional[int] = ..., af_icon_id: _Optional[int] = ..., card_icon_flag: _Optional[int] = ...) -> None: ...
    class ProtectCard(_message.Message):
        __slots__ = ["card_id", "common", "deepen_lv", "flowering_num", "instance_id", "lock", "main_lv", "rarity"]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DEEPEN_LV_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_NUM_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        LOCK_FIELD_NUMBER: _ClassVar[int]
        MAIN_LV_FIELD_NUMBER: _ClassVar[int]
        RARITY_FIELD_NUMBER: _ClassVar[int]
        card_id: int
        common: EventSchema.Common
        deepen_lv: int
        flowering_num: int
        instance_id: int
        lock: int
        main_lv: int
        rarity: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., rarity: _Optional[int] = ..., card_id: _Optional[int] = ..., instance_id: _Optional[int] = ..., flowering_num: _Optional[int] = ..., main_lv: _Optional[int] = ..., deepen_lv: _Optional[int] = ..., lock: _Optional[int] = ...) -> None: ...
    class ProtectHeroine(_message.Message):
        __slots__ = ["common", "heroine_id", "heroine_lv", "instance_id", "lock"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        LOCK_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        heroine_id: int
        heroine_lv: int
        instance_id: int
        lock: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., heroine_id: _Optional[int] = ..., instance_id: _Optional[int] = ..., heroine_lv: _Optional[int] = ..., lock: _Optional[int] = ...) -> None: ...
    class ProtectSetting(_message.Message):
        __slots__ = ["common", "first_get_flag", "n_flag", "r_flag", "rarity_flag", "sr_flag", "ssr_flag"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        FIRST_GET_FLAG_FIELD_NUMBER: _ClassVar[int]
        N_FLAG_FIELD_NUMBER: _ClassVar[int]
        RARITY_FLAG_FIELD_NUMBER: _ClassVar[int]
        R_FLAG_FIELD_NUMBER: _ClassVar[int]
        SR_FLAG_FIELD_NUMBER: _ClassVar[int]
        SSR_FLAG_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        first_get_flag: int
        n_flag: int
        r_flag: int
        rarity_flag: int
        sr_flag: int
        ssr_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., first_get_flag: _Optional[int] = ..., rarity_flag: _Optional[int] = ..., n_flag: _Optional[int] = ..., r_flag: _Optional[int] = ..., sr_flag: _Optional[int] = ..., ssr_flag: _Optional[int] = ...) -> None: ...
    class PushOption(_message.Message):
        __slots__ = ["boost_push_flag", "common", "gm_notice_push_flag", "night_push_flag", "odekake_push_flag", "symbol_push_flag"]
        BOOST_PUSH_FLAG_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GM_NOTICE_PUSH_FLAG_FIELD_NUMBER: _ClassVar[int]
        NIGHT_PUSH_FLAG_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_PUSH_FLAG_FIELD_NUMBER: _ClassVar[int]
        SYMBOL_PUSH_FLAG_FIELD_NUMBER: _ClassVar[int]
        boost_push_flag: int
        common: EventSchema.Common
        gm_notice_push_flag: int
        night_push_flag: int
        odekake_push_flag: int
        symbol_push_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., boost_push_flag: _Optional[int] = ..., symbol_push_flag: _Optional[int] = ..., odekake_push_flag: _Optional[int] = ..., gm_notice_push_flag: _Optional[int] = ..., night_push_flag: _Optional[int] = ...) -> None: ...
    class QuestEnd(_message.Message):
        __slots__ = ["common", "quest_id", "quest_pt", "quest_pt_ranking"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        QUEST_ID_FIELD_NUMBER: _ClassVar[int]
        QUEST_PT_FIELD_NUMBER: _ClassVar[int]
        QUEST_PT_RANKING_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        quest_id: int
        quest_pt: int
        quest_pt_ranking: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., quest_pt_ranking: _Optional[int] = ..., quest_pt: _Optional[int] = ..., quest_id: _Optional[int] = ...) -> None: ...
    class RaidBossAttack(_message.Message):
        __slots__ = ["boss_attack_route", "common", "event_coin_id", "event_id", "event_point_id", "get_event_coin", "get_event_point", "odekake_session_id", "raid_af_hp", "raid_bf_hp", "raid_bonus_damage", "raid_boss_attack_damage", "raid_boss_id", "raid_boss_instance_id", "raid_boss_lv", "raid_boss_max_hp", "raid_boss_status", "raid_original_damage", "raid_status", "session_id"]
        BOSS_ATTACK_ROUTE_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EVENT_COIN_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_POINT_ID_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_COIN_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_AF_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BF_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BONUS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ATTACK_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_LV_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_MAX_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_STATUS_FIELD_NUMBER: _ClassVar[int]
        RAID_ORIGINAL_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_STATUS_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        boss_attack_route: int
        common: EventSchema.Common
        event_coin_id: int
        event_id: int
        event_point_id: int
        get_event_coin: int
        get_event_point: int
        odekake_session_id: str
        raid_af_hp: int
        raid_bf_hp: int
        raid_bonus_damage: int
        raid_boss_attack_damage: int
        raid_boss_id: int
        raid_boss_instance_id: str
        raid_boss_lv: int
        raid_boss_max_hp: int
        raid_boss_status: int
        raid_original_damage: int
        raid_status: int
        session_id: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., raid_boss_id: _Optional[int] = ..., raid_boss_instance_id: _Optional[str] = ..., raid_boss_lv: _Optional[int] = ..., raid_boss_max_hp: _Optional[int] = ..., raid_status: _Optional[int] = ..., boss_attack_route: _Optional[int] = ..., session_id: _Optional[str] = ..., odekake_session_id: _Optional[str] = ..., raid_bf_hp: _Optional[int] = ..., raid_af_hp: _Optional[int] = ..., raid_boss_attack_damage: _Optional[int] = ..., raid_boss_status: _Optional[int] = ..., raid_original_damage: _Optional[int] = ..., raid_bonus_damage: _Optional[int] = ..., event_point_id: _Optional[int] = ..., get_event_point: _Optional[int] = ..., event_coin_id: _Optional[int] = ..., get_event_coin: _Optional[int] = ..., event_id: _Optional[int] = ...) -> None: ...
    class RaidBossDiscover(_message.Message):
        __slots__ = ["common", "discover_user", "event_id", "odekake_session_id", "raid_boss_discover_route", "raid_boss_id", "raid_boss_instance_id", "raid_boss_lv", "raid_boss_max_hp", "raid_boss_shere_route", "session_id", "user_relation"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DISCOVER_USER_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_DISCOVER_ROUTE_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_LV_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_MAX_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_SHERE_ROUTE_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        USER_RELATION_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        discover_user: str
        event_id: int
        odekake_session_id: str
        raid_boss_discover_route: int
        raid_boss_id: int
        raid_boss_instance_id: str
        raid_boss_lv: int
        raid_boss_max_hp: int
        raid_boss_shere_route: int
        session_id: str
        user_relation: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., raid_boss_id: _Optional[int] = ..., raid_boss_instance_id: _Optional[str] = ..., raid_boss_lv: _Optional[int] = ..., raid_boss_max_hp: _Optional[int] = ..., raid_boss_discover_route: _Optional[int] = ..., session_id: _Optional[str] = ..., odekake_session_id: _Optional[str] = ..., event_id: _Optional[int] = ..., raid_boss_shere_route: _Optional[int] = ..., discover_user: _Optional[str] = ..., user_relation: _Optional[int] = ...) -> None: ...
    class RaidBossInvite(_message.Message):
        __slots__ = ["common", "discover_user", "raid_boss_id", "raid_boss_instance_id", "raid_boss_lv", "raid_boss_max_hp", "user_relation"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DISCOVER_USER_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_LV_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_MAX_HP_FIELD_NUMBER: _ClassVar[int]
        USER_RELATION_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        discover_user: str
        raid_boss_id: int
        raid_boss_instance_id: str
        raid_boss_lv: int
        raid_boss_max_hp: int
        user_relation: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., raid_boss_id: _Optional[int] = ..., raid_boss_instance_id: _Optional[str] = ..., raid_boss_lv: _Optional[int] = ..., raid_boss_max_hp: _Optional[int] = ..., discover_user: _Optional[str] = ..., user_relation: _Optional[int] = ...) -> None: ...
    class RaidBossLost(_message.Message):
        __slots__ = ["boss_attack_route", "boss_attack_select", "common", "discover_user", "event_id", "odekake_session_id", "raid_boss_hp", "raid_boss_id", "raid_boss_instance_id", "raid_boss_lv", "raid_boss_max_hp", "raid_boss_participants", "raid_status", "reason", "session_id"]
        BOSS_ATTACK_ROUTE_FIELD_NUMBER: _ClassVar[int]
        BOSS_ATTACK_SELECT_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DISCOVER_USER_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_LV_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_MAX_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_PARTICIPANTS_FIELD_NUMBER: _ClassVar[int]
        RAID_STATUS_FIELD_NUMBER: _ClassVar[int]
        REASON_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        boss_attack_route: int
        boss_attack_select: int
        common: EventSchema.Common
        discover_user: str
        event_id: int
        odekake_session_id: str
        raid_boss_hp: int
        raid_boss_id: int
        raid_boss_instance_id: str
        raid_boss_lv: int
        raid_boss_max_hp: int
        raid_boss_participants: int
        raid_status: int
        reason: int
        session_id: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., raid_boss_id: _Optional[int] = ..., raid_boss_instance_id: _Optional[str] = ..., raid_boss_lv: _Optional[int] = ..., raid_boss_max_hp: _Optional[int] = ..., raid_status: _Optional[int] = ..., reason: _Optional[int] = ..., boss_attack_select: _Optional[int] = ..., boss_attack_route: _Optional[int] = ..., session_id: _Optional[str] = ..., odekake_session_id: _Optional[str] = ..., raid_boss_hp: _Optional[int] = ..., raid_boss_participants: _Optional[int] = ..., event_id: _Optional[int] = ..., discover_user: _Optional[str] = ...) -> None: ...
    class RaidBossSelect(_message.Message):
        __slots__ = ["common", "discover_user", "event_id", "raid_boss_hp", "raid_boss_id", "raid_boss_instance_id", "raid_boss_lv", "raid_boss_max_hp", "raid_boss_participants", "raid_choose", "raid_status", "user_relation"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DISCOVER_USER_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_LV_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_MAX_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_PARTICIPANTS_FIELD_NUMBER: _ClassVar[int]
        RAID_CHOOSE_FIELD_NUMBER: _ClassVar[int]
        RAID_STATUS_FIELD_NUMBER: _ClassVar[int]
        USER_RELATION_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        discover_user: str
        event_id: int
        raid_boss_hp: int
        raid_boss_id: int
        raid_boss_instance_id: str
        raid_boss_lv: int
        raid_boss_max_hp: int
        raid_boss_participants: int
        raid_choose: int
        raid_status: int
        user_relation: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., raid_boss_id: _Optional[int] = ..., raid_boss_instance_id: _Optional[str] = ..., raid_boss_lv: _Optional[int] = ..., raid_boss_max_hp: _Optional[int] = ..., raid_status: _Optional[int] = ..., raid_choose: _Optional[int] = ..., raid_boss_hp: _Optional[int] = ..., raid_boss_participants: _Optional[int] = ..., event_id: _Optional[int] = ..., discover_user: _Optional[str] = ..., user_relation: _Optional[int] = ...) -> None: ...
    class RaidStageEnd(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill", "active_skill_id", "active_skill_t", "af_high_score_rate", "af_nakayoshi_lv", "af_nakayoshi_pt", "auto_active_flag", "auto_mode_flag", "ave_fps", "best_defeat_time", "bf_high_score_rate", "bomb_num", "bomb_time", "boost_ratio", "boost_reward_ratio", "boss_atack_option", "boss_damage", "boss_hp", "boss_id", "boss_target", "burst_skill", "burst_skill_id", "burst_skill_t", "card_id", "card_level", "clear_danmaku", "combo_num", "combo_target", "common", "continue_num", "daily_bonus_flag", "danmaku_flag", "danmaku_id", "deck_id", "defeat_time", "detailed_combo", "detailed_notes", "detailed_score_adjust", "detailed_score_base", "detailed_score_up_bonus", "difficulty", "difficulty_bonus_damage", "dream_point", "drop_item_id", "drop_item_num", "event_bonus_point", "event_coin_id", "event_id", "event_point_id", "full_combo_flag", "gage_bonus", "get_card_exp", "get_event_coin", "get_event_point", "get_nakayoshi_pt", "get_point_charm", "get_power_charm", "get_user_exp", "heroine_id", "heroine_lv", "high_score", "life_result", "low_fps", "max_damage", "miss_num", "miss_time", "music_id", "mv_flag", "new_full_combo", "new_p_full_combo", "new_score_rank", "notes", "notes_size_option", "oirginal_event_point", "passive_skill", "passive_skill_id", "passive_skill_t", "private_score_ranking", "raid_af_hp", "raid_bf_hp", "raid_bonus_damage", "raid_boost_bonus_point", "raid_boss_attack_damage", "raid_boss_discover", "raid_boss_id", "raid_boss_instance_id", "raid_boss_lv", "raid_boss_max_hp", "raid_boss_status", "raid_help_boost_bonus_point", "raid_help_boost_reward_ratio", "raid_original_damage", "raid_remaint_boost", "raid_status", "raid_use_boost", "rank_bonus_point", "rehearsal_flag", "remaint_boost", "result", "retry_life", "retry_self", "score", "score_rank", "score_target", "session_id", "skip_ticket_num", "spell_break_flag", "spell_card_id", "spell_card_place_id", "start_t", "total_score_ranking", "ttl_event_point", "unlock_bgm_flag", "unlock_bgm_id", "use_boost"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        AF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        AUTO_ACTIVE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AVE_FPS_FIELD_NUMBER: _ClassVar[int]
        BEST_DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        BF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        BOMB_NUM_FIELD_NUMBER: _ClassVar[int]
        BOMB_TIME_FIELD_NUMBER: _ClassVar[int]
        BOOST_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOSS_ATACK_OPTION_FIELD_NUMBER: _ClassVar[int]
        BOSS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        BOSS_HP_FIELD_NUMBER: _ClassVar[int]
        BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        BOSS_TARGET_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CLEAR_DANMAKU_FIELD_NUMBER: _ClassVar[int]
        COMBO_NUM_FIELD_NUMBER: _ClassVar[int]
        COMBO_TARGET_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_NUM_FIELD_NUMBER: _ClassVar[int]
        DAILY_BONUS_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_ID_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        DETAILED_COMBO_FIELD_NUMBER: _ClassVar[int]
        DETAILED_NOTES_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_ADJUST_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_BASE_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_UP_BONUS_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_BONUS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        DREAM_POINT_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        EVENT_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        EVENT_COIN_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EVENT_POINT_ID_FIELD_NUMBER: _ClassVar[int]
        FULL_COMBO_FLAG_FIELD_NUMBER: _ClassVar[int]
        GAGE_BONUS_FIELD_NUMBER: _ClassVar[int]
        GET_CARD_EXP_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_COIN_FIELD_NUMBER: _ClassVar[int]
        GET_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        GET_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        GET_POINT_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_POWER_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_USER_EXP_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_FIELD_NUMBER: _ClassVar[int]
        LIFE_RESULT_FIELD_NUMBER: _ClassVar[int]
        LOW_FPS_FIELD_NUMBER: _ClassVar[int]
        MAX_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        MISS_NUM_FIELD_NUMBER: _ClassVar[int]
        MISS_TIME_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        MV_FLAG_FIELD_NUMBER: _ClassVar[int]
        NEW_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_P_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        NOTES_FIELD_NUMBER: _ClassVar[int]
        NOTES_SIZE_OPTION_FIELD_NUMBER: _ClassVar[int]
        OIRGINAL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        PRIVATE_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        RAID_AF_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BF_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BONUS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_BOOST_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ATTACK_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_DISCOVER_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_LV_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_MAX_HP_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_STATUS_FIELD_NUMBER: _ClassVar[int]
        RAID_HELP_BOOST_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        RAID_HELP_BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        RAID_ORIGINAL_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        RAID_REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        RAID_STATUS_FIELD_NUMBER: _ClassVar[int]
        RAID_USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        RANK_BONUS_POINT_FIELD_NUMBER: _ClassVar[int]
        REHEARSAL_FLAG_FIELD_NUMBER: _ClassVar[int]
        REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        RESULT_FIELD_NUMBER: _ClassVar[int]
        RETRY_LIFE_FIELD_NUMBER: _ClassVar[int]
        RETRY_SELF_FIELD_NUMBER: _ClassVar[int]
        SCORE_FIELD_NUMBER: _ClassVar[int]
        SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        SCORE_TARGET_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SKIP_TICKET_NUM_FIELD_NUMBER: _ClassVar[int]
        SPELL_BREAK_FLAG_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_ID_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        START_T_FIELD_NUMBER: _ClassVar[int]
        TOTAL_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        TTL_EVENT_POINT_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_FLAG_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill: int
        active_skill_id: str
        active_skill_t: float
        af_high_score_rate: int
        af_nakayoshi_lv: int
        af_nakayoshi_pt: int
        auto_active_flag: int
        auto_mode_flag: int
        ave_fps: int
        best_defeat_time: int
        bf_high_score_rate: int
        bomb_num: int
        bomb_time: str
        boost_ratio: int
        boost_reward_ratio: int
        boss_atack_option: int
        boss_damage: int
        boss_hp: int
        boss_id: int
        boss_target: int
        burst_skill: int
        burst_skill_id: str
        burst_skill_t: float
        card_id: str
        card_level: str
        clear_danmaku: int
        combo_num: int
        combo_target: int
        common: EventSchema.Common
        continue_num: int
        daily_bonus_flag: int
        danmaku_flag: int
        danmaku_id: int
        deck_id: int
        defeat_time: int
        detailed_combo: str
        detailed_notes: str
        detailed_score_adjust: str
        detailed_score_base: str
        detailed_score_up_bonus: str
        difficulty: int
        difficulty_bonus_damage: int
        dream_point: int
        drop_item_id: str
        drop_item_num: str
        event_bonus_point: int
        event_coin_id: int
        event_id: int
        event_point_id: int
        full_combo_flag: int
        gage_bonus: int
        get_card_exp: int
        get_event_coin: int
        get_event_point: int
        get_nakayoshi_pt: int
        get_point_charm: int
        get_power_charm: int
        get_user_exp: int
        heroine_id: str
        heroine_lv: str
        high_score: int
        life_result: int
        low_fps: int
        max_damage: int
        miss_num: int
        miss_time: str
        music_id: int
        mv_flag: int
        new_full_combo: int
        new_p_full_combo: int
        new_score_rank: int
        notes: str
        notes_size_option: int
        oirginal_event_point: int
        passive_skill: int
        passive_skill_id: str
        passive_skill_t: float
        private_score_ranking: int
        raid_af_hp: int
        raid_bf_hp: int
        raid_bonus_damage: int
        raid_boost_bonus_point: int
        raid_boss_attack_damage: int
        raid_boss_discover: int
        raid_boss_id: int
        raid_boss_instance_id: str
        raid_boss_lv: int
        raid_boss_max_hp: int
        raid_boss_status: int
        raid_help_boost_bonus_point: int
        raid_help_boost_reward_ratio: int
        raid_original_damage: int
        raid_remaint_boost: int
        raid_status: int
        raid_use_boost: int
        rank_bonus_point: int
        rehearsal_flag: int
        remaint_boost: int
        result: int
        retry_life: int
        retry_self: int
        score: int
        score_rank: int
        score_target: int
        session_id: str
        skip_ticket_num: int
        spell_break_flag: int
        spell_card_id: int
        spell_card_place_id: int
        start_t: int
        total_score_ranking: int
        ttl_event_point: int
        unlock_bgm_flag: int
        unlock_bgm_id: int
        use_boost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., music_id: _Optional[int] = ..., mv_flag: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., skip_ticket_num: _Optional[int] = ..., rehearsal_flag: _Optional[int] = ..., spell_break_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., life_result: _Optional[int] = ..., start_t: _Optional[int] = ..., deck_id: _Optional[int] = ..., score: _Optional[int] = ..., high_score: _Optional[int] = ..., bf_high_score_rate: _Optional[int] = ..., af_high_score_rate: _Optional[int] = ..., private_score_ranking: _Optional[int] = ..., total_score_ranking: _Optional[int] = ..., score_rank: _Optional[int] = ..., new_score_rank: _Optional[int] = ..., combo_num: _Optional[int] = ..., full_combo_flag: _Optional[int] = ..., new_full_combo: _Optional[int] = ..., new_p_full_combo: _Optional[int] = ..., auto_active_flag: _Optional[int] = ..., active_skill: _Optional[int] = ..., active_skill_t: _Optional[float] = ..., active_skill_id: _Optional[str] = ..., passive_skill: _Optional[int] = ..., passive_skill_t: _Optional[float] = ..., passive_skill_id: _Optional[str] = ..., burst_skill: _Optional[int] = ..., burst_skill_t: _Optional[float] = ..., burst_skill_id: _Optional[str] = ..., spell_card_id: _Optional[int] = ..., spell_card_place_id: _Optional[int] = ..., boss_id: _Optional[int] = ..., boss_hp: _Optional[int] = ..., boss_damage: _Optional[int] = ..., max_damage: _Optional[int] = ..., defeat_time: _Optional[int] = ..., best_defeat_time: _Optional[int] = ..., get_user_exp: _Optional[int] = ..., drop_item_id: _Optional[str] = ..., drop_item_num: _Optional[str] = ..., ave_fps: _Optional[int] = ..., low_fps: _Optional[int] = ..., dream_point: _Optional[int] = ..., card_id: _Optional[str] = ..., get_card_exp: _Optional[int] = ..., card_level: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., get_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_lv: _Optional[int] = ..., notes: _Optional[str] = ..., score_target: _Optional[int] = ..., combo_target: _Optional[int] = ..., boss_target: _Optional[int] = ..., daily_bonus_flag: _Optional[int] = ..., danmaku_flag: _Optional[int] = ..., danmaku_id: _Optional[int] = ..., get_point_charm: _Optional[int] = ..., get_power_charm: _Optional[int] = ..., miss_num: _Optional[int] = ..., miss_time: _Optional[str] = ..., bomb_num: _Optional[int] = ..., bomb_time: _Optional[str] = ..., clear_danmaku: _Optional[int] = ..., boost_ratio: _Optional[int] = ..., raid_help_boost_reward_ratio: _Optional[int] = ..., remaint_boost: _Optional[int] = ..., use_boost: _Optional[int] = ..., raid_remaint_boost: _Optional[int] = ..., raid_use_boost: _Optional[int] = ..., event_id: _Optional[int] = ..., event_point_id: _Optional[int] = ..., get_event_point: _Optional[int] = ..., oirginal_event_point: _Optional[int] = ..., difficulty_bonus_damage: _Optional[int] = ..., rank_bonus_point: _Optional[int] = ..., raid_boost_bonus_point: _Optional[int] = ..., raid_help_boost_bonus_point: _Optional[int] = ..., event_bonus_point: _Optional[int] = ..., gage_bonus: _Optional[int] = ..., ttl_event_point: _Optional[int] = ..., event_coin_id: _Optional[int] = ..., get_event_coin: _Optional[int] = ..., raid_boss_id: _Optional[int] = ..., raid_boss_instance_id: _Optional[str] = ..., raid_boss_lv: _Optional[int] = ..., raid_boss_max_hp: _Optional[int] = ..., raid_status: _Optional[int] = ..., raid_bf_hp: _Optional[int] = ..., raid_af_hp: _Optional[int] = ..., raid_boss_attack_damage: _Optional[int] = ..., raid_original_damage: _Optional[int] = ..., raid_bonus_damage: _Optional[int] = ..., raid_boss_status: _Optional[int] = ..., raid_boss_discover: _Optional[int] = ..., result: _Optional[int] = ..., continue_num: _Optional[int] = ..., retry_self: _Optional[int] = ..., retry_life: _Optional[int] = ..., detailed_notes: _Optional[str] = ..., boss_atack_option: _Optional[int] = ..., notes_size_option: _Optional[int] = ..., detailed_score_base: _Optional[str] = ..., detailed_combo: _Optional[str] = ..., detailed_score_up_bonus: _Optional[str] = ..., detailed_score_adjust: _Optional[str] = ..., boost_reward_ratio: _Optional[int] = ..., unlock_bgm_flag: _Optional[int] = ..., unlock_bgm_id: _Optional[int] = ..., **kwargs) -> None: ...
    class RaidStageStart(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill_id", "active_skill_level", "attribute", "auto_mode_flag", "bf_nakayoshi_lv", "bf_nakayoshi_pt", "bluetooth_flag", "bonus_music_flag", "boss_effect_flag", "burst_skill_id", "burst_skill_level", "card_deepen", "card_flowering", "card_id", "card_level", "card_para_total", "card_rarity", "card_skill_level", "card_type_id", "common", "deck_id", "difficulty", "event_id", "expected_score_rank", "first_difficulty_flag", "first_music_flag", "flowering_lv_bonus", "heroine_bonus", "heroine_id", "heroine_lv", "heroine_skill", "heroine_skill_bonus", "mode", "music_id", "notes_speed", "notes_timing", "para_total", "passive_skill_boost", "passive_skill_id", "passive_skill_level", "raid_boss_id", "raid_boss_instance_id", "raid_boss_lv", "raid_boss_max_hp", "rhythm_effect_flag", "session_id", "total_para_co", "total_para_em", "total_para_life", "total_para_ro", "total_para_shot", "type_fit_bonus", "vibration_flag"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        ATTRIBUTE_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        BLUETOOTH_FLAG_FIELD_NUMBER: _ClassVar[int]
        BONUS_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        BOSS_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        CARD_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        CARD_RARITY_FIELD_NUMBER: _ClassVar[int]
        CARD_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        EXPECTED_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        FIRST_DIFFICULTY_FLAG_FIELD_NUMBER: _ClassVar[int]
        FIRST_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_LV_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_FIELD_NUMBER: _ClassVar[int]
        MODE_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        NOTES_SPEED_FIELD_NUMBER: _ClassVar[int]
        NOTES_TIMING_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_BOOST_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_LV_FIELD_NUMBER: _ClassVar[int]
        RAID_BOSS_MAX_HP_FIELD_NUMBER: _ClassVar[int]
        RHYTHM_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_LIFE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_SHOT_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIT_BONUS_FIELD_NUMBER: _ClassVar[int]
        VIBRATION_FLAG_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill_id: str
        active_skill_level: str
        attribute: int
        auto_mode_flag: int
        bf_nakayoshi_lv: int
        bf_nakayoshi_pt: int
        bluetooth_flag: int
        bonus_music_flag: int
        boss_effect_flag: int
        burst_skill_id: str
        burst_skill_level: str
        card_deepen: str
        card_flowering: str
        card_id: str
        card_level: str
        card_para_total: int
        card_rarity: str
        card_skill_level: str
        card_type_id: str
        common: EventSchema.Common
        deck_id: int
        difficulty: int
        event_id: int
        expected_score_rank: int
        first_difficulty_flag: int
        first_music_flag: int
        flowering_lv_bonus: int
        heroine_bonus: int
        heroine_id: str
        heroine_lv: str
        heroine_skill: str
        heroine_skill_bonus: int
        mode: int
        music_id: int
        notes_speed: int
        notes_timing: int
        para_total: int
        passive_skill_boost: str
        passive_skill_id: str
        passive_skill_level: str
        raid_boss_id: int
        raid_boss_instance_id: str
        raid_boss_lv: int
        raid_boss_max_hp: int
        rhythm_effect_flag: int
        session_id: str
        total_para_co: int
        total_para_em: int
        total_para_life: int
        total_para_ro: int
        total_para_shot: int
        type_fit_bonus: int
        vibration_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., raid_boss_id: _Optional[int] = ..., raid_boss_instance_id: _Optional[str] = ..., raid_boss_lv: _Optional[int] = ..., raid_boss_max_hp: _Optional[int] = ..., session_id: _Optional[str] = ..., notes_speed: _Optional[int] = ..., notes_timing: _Optional[int] = ..., vibration_flag: _Optional[int] = ..., bluetooth_flag: _Optional[int] = ..., music_id: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., first_music_flag: _Optional[int] = ..., first_difficulty_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., mode: _Optional[int] = ..., attribute: _Optional[int] = ..., boss_effect_flag: _Optional[int] = ..., rhythm_effect_flag: _Optional[int] = ..., deck_id: _Optional[int] = ..., card_id: _Optional[str] = ..., card_type_id: _Optional[str] = ..., card_level: _Optional[str] = ..., card_skill_level: _Optional[str] = ..., active_skill_id: _Optional[str] = ..., passive_skill_id: _Optional[str] = ..., burst_skill_id: _Optional[str] = ..., active_skill_level: _Optional[str] = ..., passive_skill_level: _Optional[str] = ..., burst_skill_level: _Optional[str] = ..., card_rarity: _Optional[str] = ..., card_flowering: _Optional[str] = ..., card_deepen: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., heroine_skill: _Optional[str] = ..., bf_nakayoshi_pt: _Optional[int] = ..., bf_nakayoshi_lv: _Optional[int] = ..., total_para_life: _Optional[int] = ..., total_para_shot: _Optional[int] = ..., para_total: _Optional[int] = ..., total_para_em: _Optional[int] = ..., total_para_co: _Optional[int] = ..., total_para_ro: _Optional[int] = ..., card_para_total: _Optional[int] = ..., flowering_lv_bonus: _Optional[int] = ..., type_fit_bonus: _Optional[int] = ..., heroine_bonus: _Optional[int] = ..., heroine_skill_bonus: _Optional[int] = ..., expected_score_rank: _Optional[int] = ..., event_id: _Optional[int] = ..., bonus_music_flag: _Optional[int] = ..., passive_skill_boost: _Optional[str] = ...) -> None: ...
    class RealMoneyShop(_message.Message):
        __slots__ = ["common", "get_free_vc", "get_item_id", "get_item_num", "get_paid_vc", "instance_id", "item_type_id", "product_id", "purchase_id", "shop_id", "trade_count_limit", "trade_limit_date"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GET_FREE_VC_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        GET_PAID_VC_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        PRODUCT_ID_FIELD_NUMBER: _ClassVar[int]
        PURCHASE_ID_FIELD_NUMBER: _ClassVar[int]
        SHOP_ID_FIELD_NUMBER: _ClassVar[int]
        TRADE_COUNT_LIMIT_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_DATE_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        get_free_vc: int
        get_item_id: str
        get_item_num: str
        get_paid_vc: int
        instance_id: str
        item_type_id: str
        product_id: int
        purchase_id: str
        shop_id: int
        trade_count_limit: int
        trade_limit_date: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., shop_id: _Optional[int] = ..., purchase_id: _Optional[str] = ..., product_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., instance_id: _Optional[str] = ..., item_type_id: _Optional[str] = ..., get_paid_vc: _Optional[int] = ..., get_free_vc: _Optional[int] = ..., trade_limit_date: _Optional[int] = ..., trade_count_limit: _Optional[int] = ...) -> None: ...
    class Reconstruction(_message.Message):
        __slots__ = ["area_id", "char_id", "common", "episode_id", "get_item_id", "get_item_num", "object_id", "odekake_id", "place_spot_id", "reconstruct_char_id", "reconstruct_id", "reconstruct_max_step", "reconstruct_step", "use_dream", "use_item_id", "use_item_num"]
        AREA_ID_FIELD_NUMBER: _ClassVar[int]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EPISODE_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        OBJECT_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_ID_FIELD_NUMBER: _ClassVar[int]
        PLACE_SPOT_ID_FIELD_NUMBER: _ClassVar[int]
        RECONSTRUCT_CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        RECONSTRUCT_ID_FIELD_NUMBER: _ClassVar[int]
        RECONSTRUCT_MAX_STEP_FIELD_NUMBER: _ClassVar[int]
        RECONSTRUCT_STEP_FIELD_NUMBER: _ClassVar[int]
        USE_DREAM_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        area_id: int
        char_id: int
        common: EventSchema.Common
        episode_id: int
        get_item_id: str
        get_item_num: str
        object_id: int
        odekake_id: int
        place_spot_id: int
        reconstruct_char_id: int
        reconstruct_id: int
        reconstruct_max_step: int
        reconstruct_step: int
        use_dream: int
        use_item_id: str
        use_item_num: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., reconstruct_id: _Optional[int] = ..., reconstruct_char_id: _Optional[int] = ..., reconstruct_max_step: _Optional[int] = ..., reconstruct_step: _Optional[int] = ..., use_item_id: _Optional[str] = ..., use_item_num: _Optional[str] = ..., use_dream: _Optional[int] = ..., object_id: _Optional[int] = ..., episode_id: _Optional[int] = ..., place_spot_id: _Optional[int] = ..., area_id: _Optional[int] = ..., char_id: _Optional[int] = ..., odekake_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ...) -> None: ...
    class Repair(_message.Message):
        __slots__ = ["area_id", "char_id", "common", "episode_id", "get_item_id", "get_item_num", "object_id", "odekake_id", "place_spot_id", "repair_char_id", "repair_id", "repair_max_objects", "repair_objects", "use_dream", "use_item_id", "use_item_num"]
        AREA_ID_FIELD_NUMBER: _ClassVar[int]
        CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EPISODE_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        OBJECT_ID_FIELD_NUMBER: _ClassVar[int]
        ODEKAKE_ID_FIELD_NUMBER: _ClassVar[int]
        PLACE_SPOT_ID_FIELD_NUMBER: _ClassVar[int]
        REPAIR_CHAR_ID_FIELD_NUMBER: _ClassVar[int]
        REPAIR_ID_FIELD_NUMBER: _ClassVar[int]
        REPAIR_MAX_OBJECTS_FIELD_NUMBER: _ClassVar[int]
        REPAIR_OBJECTS_FIELD_NUMBER: _ClassVar[int]
        USE_DREAM_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        area_id: int
        char_id: int
        common: EventSchema.Common
        episode_id: int
        get_item_id: str
        get_item_num: str
        object_id: int
        odekake_id: int
        place_spot_id: int
        repair_char_id: int
        repair_id: int
        repair_max_objects: int
        repair_objects: int
        use_dream: int
        use_item_id: str
        use_item_num: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., repair_id: _Optional[int] = ..., repair_char_id: _Optional[int] = ..., repair_max_objects: _Optional[int] = ..., repair_objects: _Optional[int] = ..., use_item_id: _Optional[str] = ..., use_item_num: _Optional[str] = ..., use_dream: _Optional[int] = ..., object_id: _Optional[int] = ..., episode_id: _Optional[int] = ..., place_spot_id: _Optional[int] = ..., area_id: _Optional[int] = ..., char_id: _Optional[int] = ..., odekake_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ...) -> None: ...
    class Review(_message.Message):
        __slots__ = ["common"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ...) -> None: ...
    class SellingCard(_message.Message):
        __slots__ = ["card_id", "card_num", "common", "instance_id", "piece_num", "rarity"]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_NUM_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        PIECE_NUM_FIELD_NUMBER: _ClassVar[int]
        RARITY_FIELD_NUMBER: _ClassVar[int]
        card_id: str
        card_num: int
        common: EventSchema.Common
        instance_id: str
        piece_num: int
        rarity: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., card_id: _Optional[str] = ..., instance_id: _Optional[str] = ..., card_num: _Optional[int] = ..., rarity: _Optional[str] = ..., piece_num: _Optional[int] = ...) -> None: ...
    class SellingHeroine(_message.Message):
        __slots__ = ["common", "heroine_id", "heroine_num", "instance_id", "medal_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_NUM_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        MEDAL_NUM_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        heroine_id: str
        heroine_num: int
        instance_id: str
        medal_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., heroine_id: _Optional[str] = ..., instance_id: _Optional[str] = ..., heroine_num: _Optional[int] = ..., medal_num: _Optional[int] = ...) -> None: ...
    class SingleStageEnd(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill", "active_skill_id", "active_skill_t", "af_high_score_rate", "af_nakayoshi_lv", "af_nakayoshi_pt", "auto_active_flag", "auto_mode_flag", "ave_fps", "best_defeat_time", "bf_high_score_rate", "bomb_num", "bomb_time", "boost_ratio", "boost_reward_ratio", "boss_atack_option", "boss_damage", "boss_hp", "boss_id", "boss_target", "burst_skill", "burst_skill_id", "burst_skill_t", "card_id", "card_level", "clear_danmaku", "combo_num", "combo_target", "common", "continue_num", "daily_bonus_flag", "danmaku_flag", "danmaku_id", "deck_id", "defeat_time", "detailed_combo", "detailed_notes", "detailed_score_adjust", "detailed_score_base", "detailed_score_up_bonus", "difficulty", "dream_point", "drop_item_id", "drop_item_num", "full_combo_flag", "get_card_exp", "get_nakayoshi_pt", "get_point_charm", "get_power_charm", "get_user_exp", "heroine_id", "heroine_lv", "high_score", "life_result", "low_fps", "max_damage", "miss_num", "miss_time", "music_id", "mv_flag", "new_full_combo", "new_p_full_combo", "new_score_rank", "notes", "notes_size_option", "passive_skill", "passive_skill_id", "passive_skill_t", "private_score_ranking", "rehearsal_flag", "remaint_boost", "result", "retry_life", "retry_self", "score", "score_rank", "score_target", "session_id", "skip_ticket_num", "spell_break_flag", "spell_card_id", "spell_card_place_id", "start_t", "total_score_ranking", "unlock_bgm_flag", "unlock_bgm_id", "use_boost"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        AF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        AF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        AUTO_ACTIVE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        AVE_FPS_FIELD_NUMBER: _ClassVar[int]
        BEST_DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        BF_HIGH_SCORE_RATE_FIELD_NUMBER: _ClassVar[int]
        BOMB_NUM_FIELD_NUMBER: _ClassVar[int]
        BOMB_TIME_FIELD_NUMBER: _ClassVar[int]
        BOOST_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOOST_REWARD_RATIO_FIELD_NUMBER: _ClassVar[int]
        BOSS_ATACK_OPTION_FIELD_NUMBER: _ClassVar[int]
        BOSS_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        BOSS_HP_FIELD_NUMBER: _ClassVar[int]
        BOSS_ID_FIELD_NUMBER: _ClassVar[int]
        BOSS_TARGET_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CLEAR_DANMAKU_FIELD_NUMBER: _ClassVar[int]
        COMBO_NUM_FIELD_NUMBER: _ClassVar[int]
        COMBO_TARGET_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_FIELD_NUMBER: _ClassVar[int]
        CONTINUE_NUM_FIELD_NUMBER: _ClassVar[int]
        DAILY_BONUS_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_FLAG_FIELD_NUMBER: _ClassVar[int]
        DANMAKU_ID_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DEFEAT_TIME_FIELD_NUMBER: _ClassVar[int]
        DETAILED_COMBO_FIELD_NUMBER: _ClassVar[int]
        DETAILED_NOTES_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_ADJUST_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_BASE_FIELD_NUMBER: _ClassVar[int]
        DETAILED_SCORE_UP_BONUS_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        DREAM_POINT_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        DROP_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        FULL_COMBO_FLAG_FIELD_NUMBER: _ClassVar[int]
        GET_CARD_EXP_FIELD_NUMBER: _ClassVar[int]
        GET_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        GET_POINT_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_POWER_CHARM_FIELD_NUMBER: _ClassVar[int]
        GET_USER_EXP_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HIGH_SCORE_FIELD_NUMBER: _ClassVar[int]
        LIFE_RESULT_FIELD_NUMBER: _ClassVar[int]
        LOW_FPS_FIELD_NUMBER: _ClassVar[int]
        MAX_DAMAGE_FIELD_NUMBER: _ClassVar[int]
        MISS_NUM_FIELD_NUMBER: _ClassVar[int]
        MISS_TIME_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        MV_FLAG_FIELD_NUMBER: _ClassVar[int]
        NEW_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_P_FULL_COMBO_FIELD_NUMBER: _ClassVar[int]
        NEW_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        NOTES_FIELD_NUMBER: _ClassVar[int]
        NOTES_SIZE_OPTION_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_T_FIELD_NUMBER: _ClassVar[int]
        PRIVATE_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        REHEARSAL_FLAG_FIELD_NUMBER: _ClassVar[int]
        REMAINT_BOOST_FIELD_NUMBER: _ClassVar[int]
        RESULT_FIELD_NUMBER: _ClassVar[int]
        RETRY_LIFE_FIELD_NUMBER: _ClassVar[int]
        RETRY_SELF_FIELD_NUMBER: _ClassVar[int]
        SCORE_FIELD_NUMBER: _ClassVar[int]
        SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        SCORE_TARGET_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        SKIP_TICKET_NUM_FIELD_NUMBER: _ClassVar[int]
        SPELL_BREAK_FLAG_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_ID_FIELD_NUMBER: _ClassVar[int]
        SPELL_CARD_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        START_T_FIELD_NUMBER: _ClassVar[int]
        TOTAL_SCORE_RANKING_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_FLAG_FIELD_NUMBER: _ClassVar[int]
        UNLOCK_BGM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_BOOST_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill: int
        active_skill_id: str
        active_skill_t: float
        af_high_score_rate: int
        af_nakayoshi_lv: int
        af_nakayoshi_pt: int
        auto_active_flag: int
        auto_mode_flag: int
        ave_fps: int
        best_defeat_time: int
        bf_high_score_rate: int
        bomb_num: int
        bomb_time: str
        boost_ratio: int
        boost_reward_ratio: int
        boss_atack_option: int
        boss_damage: int
        boss_hp: int
        boss_id: int
        boss_target: int
        burst_skill: int
        burst_skill_id: str
        burst_skill_t: float
        card_id: str
        card_level: str
        clear_danmaku: int
        combo_num: int
        combo_target: int
        common: EventSchema.Common
        continue_num: int
        daily_bonus_flag: int
        danmaku_flag: int
        danmaku_id: int
        deck_id: int
        defeat_time: int
        detailed_combo: str
        detailed_notes: str
        detailed_score_adjust: str
        detailed_score_base: str
        detailed_score_up_bonus: str
        difficulty: int
        dream_point: int
        drop_item_id: str
        drop_item_num: str
        full_combo_flag: int
        get_card_exp: int
        get_nakayoshi_pt: int
        get_point_charm: int
        get_power_charm: int
        get_user_exp: int
        heroine_id: str
        heroine_lv: str
        high_score: int
        life_result: int
        low_fps: int
        max_damage: int
        miss_num: int
        miss_time: str
        music_id: int
        mv_flag: int
        new_full_combo: int
        new_p_full_combo: int
        new_score_rank: int
        notes: str
        notes_size_option: int
        passive_skill: int
        passive_skill_id: str
        passive_skill_t: float
        private_score_ranking: int
        rehearsal_flag: int
        remaint_boost: int
        result: int
        retry_life: int
        retry_self: int
        score: int
        score_rank: int
        score_target: int
        session_id: str
        skip_ticket_num: int
        spell_break_flag: int
        spell_card_id: int
        spell_card_place_id: int
        start_t: int
        total_score_ranking: int
        unlock_bgm_flag: int
        unlock_bgm_id: int
        use_boost: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., music_id: _Optional[int] = ..., mv_flag: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., skip_ticket_num: _Optional[int] = ..., rehearsal_flag: _Optional[int] = ..., spell_break_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., life_result: _Optional[int] = ..., start_t: _Optional[int] = ..., deck_id: _Optional[int] = ..., score: _Optional[int] = ..., high_score: _Optional[int] = ..., bf_high_score_rate: _Optional[int] = ..., af_high_score_rate: _Optional[int] = ..., private_score_ranking: _Optional[int] = ..., total_score_ranking: _Optional[int] = ..., score_rank: _Optional[int] = ..., new_score_rank: _Optional[int] = ..., combo_num: _Optional[int] = ..., full_combo_flag: _Optional[int] = ..., new_full_combo: _Optional[int] = ..., new_p_full_combo: _Optional[int] = ..., auto_active_flag: _Optional[int] = ..., active_skill: _Optional[int] = ..., active_skill_t: _Optional[float] = ..., active_skill_id: _Optional[str] = ..., passive_skill: _Optional[int] = ..., passive_skill_t: _Optional[float] = ..., passive_skill_id: _Optional[str] = ..., spell_card_id: _Optional[int] = ..., spell_card_place_id: _Optional[int] = ..., boss_id: _Optional[int] = ..., boss_hp: _Optional[int] = ..., boss_damage: _Optional[int] = ..., max_damage: _Optional[int] = ..., defeat_time: _Optional[int] = ..., best_defeat_time: _Optional[int] = ..., get_user_exp: _Optional[int] = ..., drop_item_id: _Optional[str] = ..., drop_item_num: _Optional[str] = ..., ave_fps: _Optional[int] = ..., low_fps: _Optional[int] = ..., boost_reward_ratio: _Optional[int] = ..., dream_point: _Optional[int] = ..., card_id: _Optional[str] = ..., get_card_exp: _Optional[int] = ..., card_level: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., get_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_pt: _Optional[int] = ..., af_nakayoshi_lv: _Optional[int] = ..., notes: _Optional[str] = ..., score_target: _Optional[int] = ..., combo_target: _Optional[int] = ..., boss_target: _Optional[int] = ..., daily_bonus_flag: _Optional[int] = ..., danmaku_flag: _Optional[int] = ..., danmaku_id: _Optional[int] = ..., get_point_charm: _Optional[int] = ..., get_power_charm: _Optional[int] = ..., miss_num: _Optional[int] = ..., miss_time: _Optional[str] = ..., bomb_num: _Optional[int] = ..., bomb_time: _Optional[str] = ..., clear_danmaku: _Optional[int] = ..., boost_ratio: _Optional[int] = ..., remaint_boost: _Optional[int] = ..., use_boost: _Optional[int] = ..., result: _Optional[int] = ..., continue_num: _Optional[int] = ..., retry_self: _Optional[int] = ..., retry_life: _Optional[int] = ..., detailed_notes: _Optional[str] = ..., boss_atack_option: _Optional[int] = ..., notes_size_option: _Optional[int] = ..., detailed_score_base: _Optional[str] = ..., detailed_combo: _Optional[str] = ..., detailed_score_up_bonus: _Optional[str] = ..., detailed_score_adjust: _Optional[str] = ..., unlock_bgm_flag: _Optional[int] = ..., unlock_bgm_id: _Optional[int] = ..., burst_skill: _Optional[int] = ..., burst_skill_t: _Optional[float] = ..., burst_skill_id: _Optional[str] = ..., **kwargs) -> None: ...
    class SingleStageStart(_message.Message):
        __slots__ = ["absolute_difficulty", "active_skill_id", "active_skill_level", "attribute", "auto_mode_flag", "bf_nakayoshi_lv", "bf_nakayoshi_pt", "bluetooth_flag", "boss_effect_flag", "burst_skill_id", "burst_skill_level", "card_deepen", "card_flowering", "card_id", "card_level", "card_para_total", "card_rarity", "card_skill_level", "card_type_id", "common", "deck_id", "difficulty", "expected_score_rank", "first_difficulty_flag", "first_music_flag", "flowering_lv_bonus", "heroine_bonus", "heroine_id", "heroine_lv", "heroine_skill", "heroine_skill_bonus", "mode", "music_id", "notes_speed", "notes_timing", "para_total", "passive_skill_boost", "passive_skill_id", "passive_skill_level", "rhythm_effect_flag", "session_id", "total_para_co", "total_para_em", "total_para_life", "total_para_ro", "total_para_shot", "type_fit_bonus", "vibration_flag"]
        ABSOLUTE_DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        ACTIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        ATTRIBUTE_FIELD_NUMBER: _ClassVar[int]
        AUTO_MODE_FLAG_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_LV_FIELD_NUMBER: _ClassVar[int]
        BF_NAKAYOSHI_PT_FIELD_NUMBER: _ClassVar[int]
        BLUETOOTH_FLAG_FIELD_NUMBER: _ClassVar[int]
        BOSS_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        BURST_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_DEEPEN_FIELD_NUMBER: _ClassVar[int]
        CARD_FLOWERING_FIELD_NUMBER: _ClassVar[int]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        CARD_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        CARD_RARITY_FIELD_NUMBER: _ClassVar[int]
        CARD_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        CARD_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        DECK_ID_FIELD_NUMBER: _ClassVar[int]
        DIFFICULTY_FIELD_NUMBER: _ClassVar[int]
        EXPECTED_SCORE_RANK_FIELD_NUMBER: _ClassVar[int]
        FIRST_DIFFICULTY_FLAG_FIELD_NUMBER: _ClassVar[int]
        FIRST_MUSIC_FLAG_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_LV_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_ID_FIELD_NUMBER: _ClassVar[int]
        HEROINE_LV_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_BONUS_FIELD_NUMBER: _ClassVar[int]
        HEROINE_SKILL_FIELD_NUMBER: _ClassVar[int]
        MODE_FIELD_NUMBER: _ClassVar[int]
        MUSIC_ID_FIELD_NUMBER: _ClassVar[int]
        NOTES_SPEED_FIELD_NUMBER: _ClassVar[int]
        NOTES_TIMING_FIELD_NUMBER: _ClassVar[int]
        PARA_TOTAL_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_BOOST_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_ID_FIELD_NUMBER: _ClassVar[int]
        PASSIVE_SKILL_LEVEL_FIELD_NUMBER: _ClassVar[int]
        RHYTHM_EFFECT_FLAG_FIELD_NUMBER: _ClassVar[int]
        SESSION_ID_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_CO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_EM_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_LIFE_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_RO_FIELD_NUMBER: _ClassVar[int]
        TOTAL_PARA_SHOT_FIELD_NUMBER: _ClassVar[int]
        TYPE_FIT_BONUS_FIELD_NUMBER: _ClassVar[int]
        VIBRATION_FLAG_FIELD_NUMBER: _ClassVar[int]
        absolute_difficulty: int
        active_skill_id: str
        active_skill_level: str
        attribute: int
        auto_mode_flag: int
        bf_nakayoshi_lv: int
        bf_nakayoshi_pt: int
        bluetooth_flag: int
        boss_effect_flag: int
        burst_skill_id: str
        burst_skill_level: str
        card_deepen: str
        card_flowering: str
        card_id: str
        card_level: str
        card_para_total: int
        card_rarity: str
        card_skill_level: str
        card_type_id: str
        common: EventSchema.Common
        deck_id: int
        difficulty: int
        expected_score_rank: int
        first_difficulty_flag: int
        first_music_flag: int
        flowering_lv_bonus: int
        heroine_bonus: int
        heroine_id: str
        heroine_lv: str
        heroine_skill: str
        heroine_skill_bonus: int
        mode: int
        music_id: int
        notes_speed: int
        notes_timing: int
        para_total: int
        passive_skill_boost: str
        passive_skill_id: str
        passive_skill_level: str
        rhythm_effect_flag: int
        session_id: str
        total_para_co: int
        total_para_em: int
        total_para_life: int
        total_para_ro: int
        total_para_shot: int
        type_fit_bonus: int
        vibration_flag: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., session_id: _Optional[str] = ..., notes_speed: _Optional[int] = ..., notes_timing: _Optional[int] = ..., vibration_flag: _Optional[int] = ..., bluetooth_flag: _Optional[int] = ..., music_id: _Optional[int] = ..., auto_mode_flag: _Optional[int] = ..., first_music_flag: _Optional[int] = ..., first_difficulty_flag: _Optional[int] = ..., absolute_difficulty: _Optional[int] = ..., difficulty: _Optional[int] = ..., mode: _Optional[int] = ..., attribute: _Optional[int] = ..., boss_effect_flag: _Optional[int] = ..., rhythm_effect_flag: _Optional[int] = ..., deck_id: _Optional[int] = ..., card_id: _Optional[str] = ..., card_type_id: _Optional[str] = ..., card_level: _Optional[str] = ..., card_skill_level: _Optional[str] = ..., active_skill_id: _Optional[str] = ..., passive_skill_id: _Optional[str] = ..., card_rarity: _Optional[str] = ..., card_flowering: _Optional[str] = ..., card_deepen: _Optional[str] = ..., heroine_id: _Optional[str] = ..., heroine_lv: _Optional[str] = ..., heroine_skill: _Optional[str] = ..., bf_nakayoshi_pt: _Optional[int] = ..., bf_nakayoshi_lv: _Optional[int] = ..., total_para_life: _Optional[int] = ..., total_para_shot: _Optional[int] = ..., para_total: _Optional[int] = ..., total_para_em: _Optional[int] = ..., total_para_co: _Optional[int] = ..., total_para_ro: _Optional[int] = ..., card_para_total: _Optional[int] = ..., flowering_lv_bonus: _Optional[int] = ..., type_fit_bonus: _Optional[int] = ..., heroine_bonus: _Optional[int] = ..., heroine_skill_bonus: _Optional[int] = ..., expected_score_rank: _Optional[int] = ..., passive_skill_boost: _Optional[str] = ..., burst_skill_id: _Optional[str] = ..., active_skill_level: _Optional[str] = ..., passive_skill_level: _Optional[str] = ..., burst_skill_level: _Optional[str] = ...) -> None: ...
    class SoundVolume(_message.Message):
        __slots__ = ["bgm_volume", "common", "se_volume", "voice_volume"]
        BGM_VOLUME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        SE_VOLUME_FIELD_NUMBER: _ClassVar[int]
        VOICE_VOLUME_FIELD_NUMBER: _ClassVar[int]
        bgm_volume: int
        common: EventSchema.Common
        se_volume: int
        voice_volume: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., bgm_volume: _Optional[int] = ..., se_volume: _Optional[int] = ..., voice_volume: _Optional[int] = ...) -> None: ...
    class Spot(_message.Message):
        __slots__ = ["area_flag", "common", "place_spot_id", "place_status"]
        AREA_FLAG_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        PLACE_SPOT_ID_FIELD_NUMBER: _ClassVar[int]
        PLACE_STATUS_FIELD_NUMBER: _ClassVar[int]
        area_flag: int
        common: EventSchema.Common
        place_spot_id: int
        place_status: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., area_flag: _Optional[int] = ..., place_spot_id: _Optional[int] = ..., place_status: _Optional[int] = ...) -> None: ...
    class Status(_message.Message):
        __slots__ = ["alert_content", "alert_detail", "alert_digest", "alert_hash"]
        ALERT_CONTENT_FIELD_NUMBER: _ClassVar[int]
        ALERT_DETAIL_FIELD_NUMBER: _ClassVar[int]
        ALERT_DIGEST_FIELD_NUMBER: _ClassVar[int]
        ALERT_HASH_FIELD_NUMBER: _ClassVar[int]
        alert_content: int
        alert_detail: str
        alert_digest: str
        alert_hash: str
        def __init__(self, alert_digest: _Optional[str] = ..., alert_hash: _Optional[str] = ..., alert_content: _Optional[int] = ..., alert_detail: _Optional[str] = ...) -> None: ...
    class StatusServerPayload(_message.Message):
        __slots__ = ["client_time", "d", "num_free_crystal", "num_paid_crystal", "player_name", "reg_date", "takasho_player_id", "takasho_player_short_id"]
        CLIENT_TIME_FIELD_NUMBER: _ClassVar[int]
        D_FIELD_NUMBER: _ClassVar[int]
        NUM_FREE_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        NUM_PAID_CRYSTAL_FIELD_NUMBER: _ClassVar[int]
        PLAYER_NAME_FIELD_NUMBER: _ClassVar[int]
        REG_DATE_FIELD_NUMBER: _ClassVar[int]
        TAKASHO_PLAYER_ID_FIELD_NUMBER: _ClassVar[int]
        TAKASHO_PLAYER_SHORT_ID_FIELD_NUMBER: _ClassVar[int]
        client_time: str
        d: str
        num_free_crystal: int
        num_paid_crystal: int
        player_name: str
        reg_date: str
        takasho_player_id: str
        takasho_player_short_id: str
        def __init__(self, d: _Optional[str] = ..., client_time: _Optional[str] = ..., takasho_player_id: _Optional[str] = ..., takasho_player_short_id: _Optional[str] = ..., player_name: _Optional[str] = ..., reg_date: _Optional[str] = ..., num_free_crystal: _Optional[int] = ..., num_paid_crystal: _Optional[int] = ...) -> None: ...
    class TotalDownload(_message.Message):
        __slots__ = ["common"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ...) -> None: ...
    class TradeClubPoint(_message.Message):
        __slots__ = ["club_id", "club_name", "common", "get_item_id", "get_item_num", "item_type_id", "remain_point_num", "trade_count_limit", "trade_limit_date", "trade_limit_remain", "use_point_num"]
        CLUB_ID_FIELD_NUMBER: _ClassVar[int]
        CLUB_NAME_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        ITEM_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        REMAIN_POINT_NUM_FIELD_NUMBER: _ClassVar[int]
        TRADE_COUNT_LIMIT_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_DATE_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_REMAIN_FIELD_NUMBER: _ClassVar[int]
        USE_POINT_NUM_FIELD_NUMBER: _ClassVar[int]
        club_id: str
        club_name: str
        common: EventSchema.Common
        get_item_id: str
        get_item_num: str
        item_type_id: str
        remain_point_num: int
        trade_count_limit: int
        trade_limit_date: int
        trade_limit_remain: int
        use_point_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., club_id: _Optional[str] = ..., club_name: _Optional[str] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., item_type_id: _Optional[str] = ..., use_point_num: _Optional[int] = ..., remain_point_num: _Optional[int] = ..., trade_limit_date: _Optional[int] = ..., trade_limit_remain: _Optional[int] = ..., trade_count_limit: _Optional[int] = ...) -> None: ...
    class TradeEvent(_message.Message):
        __slots__ = ["common", "event_id", "get_item_id", "get_item_num", "instance_id", "item_type_id", "shop_id", "trade_count_limit", "trade_limit_date", "trade_limit_remain", "use_item_id", "use_item_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        EVENT_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        SHOP_ID_FIELD_NUMBER: _ClassVar[int]
        TRADE_COUNT_LIMIT_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_DATE_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_REMAIN_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        event_id: int
        get_item_id: str
        get_item_num: str
        instance_id: str
        item_type_id: str
        shop_id: int
        trade_count_limit: int
        trade_limit_date: int
        trade_limit_remain: int
        use_item_id: int
        use_item_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., use_item_id: _Optional[int] = ..., use_item_num: _Optional[int] = ..., shop_id: _Optional[int] = ..., event_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., instance_id: _Optional[str] = ..., item_type_id: _Optional[str] = ..., trade_limit_date: _Optional[int] = ..., trade_limit_remain: _Optional[int] = ..., trade_count_limit: _Optional[int] = ...) -> None: ...
    class TradeItem(_message.Message):
        __slots__ = ["common", "get_item_id", "get_item_num", "instance_id", "item_type_id", "shop_id", "shop_type_id", "trade_count_limit", "trade_limit_date", "trade_limit_remain", "use_item_id", "use_item_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        SHOP_ID_FIELD_NUMBER: _ClassVar[int]
        SHOP_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        TRADE_COUNT_LIMIT_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_DATE_FIELD_NUMBER: _ClassVar[int]
        TRADE_LIMIT_REMAIN_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        get_item_id: str
        get_item_num: str
        instance_id: str
        item_type_id: str
        shop_id: int
        shop_type_id: int
        trade_count_limit: int
        trade_limit_date: int
        trade_limit_remain: int
        use_item_id: str
        use_item_num: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., use_item_id: _Optional[str] = ..., use_item_num: _Optional[str] = ..., shop_id: _Optional[int] = ..., shop_type_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., instance_id: _Optional[str] = ..., item_type_id: _Optional[str] = ..., trade_limit_date: _Optional[int] = ..., trade_limit_remain: _Optional[int] = ..., trade_count_limit: _Optional[int] = ...) -> None: ...
    class Tutorial(_message.Message):
        __slots__ = ["common", "elapse_t", "tutorial_step_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        ELAPSE_T_FIELD_NUMBER: _ClassVar[int]
        TUTORIAL_STEP_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        elapse_t: str
        tutorial_step_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., tutorial_step_id: _Optional[int] = ..., elapse_t: _Optional[str] = ...) -> None: ...
    class TutorialMission(_message.Message):
        __slots__ = ["clear_num", "common", "get_item_id", "get_item_num", "mission_id", "page_complete_flag", "page_num"]
        CLEAR_NUM_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        GET_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        MISSION_ID_FIELD_NUMBER: _ClassVar[int]
        PAGE_COMPLETE_FLAG_FIELD_NUMBER: _ClassVar[int]
        PAGE_NUM_FIELD_NUMBER: _ClassVar[int]
        clear_num: int
        common: EventSchema.Common
        get_item_id: str
        get_item_num: str
        mission_id: int
        page_complete_flag: int
        page_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., mission_id: _Optional[int] = ..., get_item_id: _Optional[str] = ..., get_item_num: _Optional[str] = ..., clear_num: _Optional[int] = ..., page_num: _Optional[int] = ..., page_complete_flag: _Optional[int] = ...) -> None: ...
    class UraKaguraUnlock(_message.Message):
        __slots__ = ["common", "get_score_id", "use_item_flag", "use_item_num"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        GET_SCORE_ID_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_FLAG_FIELD_NUMBER: _ClassVar[int]
        USE_ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        get_score_id: int
        use_item_flag: int
        use_item_num: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., use_item_flag: _Optional[int] = ..., use_item_num: _Optional[int] = ..., get_score_id: _Optional[int] = ...) -> None: ...
    class UseItem(_message.Message):
        __slots__ = ["common", "instance_id", "item_id", "item_num", "item_type_id", "use_place_id"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        INSTANCE_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_ID_FIELD_NUMBER: _ClassVar[int]
        ITEM_NUM_FIELD_NUMBER: _ClassVar[int]
        ITEM_TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        USE_PLACE_ID_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        instance_id: int
        item_id: int
        item_num: int
        item_type_id: int
        use_place_id: int
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., item_id: _Optional[int] = ..., item_num: _Optional[int] = ..., item_type_id: _Optional[int] = ..., use_place_id: _Optional[int] = ..., instance_id: _Optional[int] = ...) -> None: ...
    class WallpaperChange(_message.Message):
        __slots__ = ["card_id", "common", "flowering_flag", "my_space_flag", "premiere_flag"]
        CARD_ID_FIELD_NUMBER: _ClassVar[int]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        FLOWERING_FLAG_FIELD_NUMBER: _ClassVar[int]
        MY_SPACE_FLAG_FIELD_NUMBER: _ClassVar[int]
        PREMIERE_FLAG_FIELD_NUMBER: _ClassVar[int]
        card_id: str
        common: EventSchema.Common
        flowering_flag: str
        my_space_flag: int
        premiere_flag: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., card_id: _Optional[str] = ..., flowering_flag: _Optional[str] = ..., premiere_flag: _Optional[str] = ..., my_space_flag: _Optional[int] = ...) -> None: ...
    class WebView(_message.Message):
        __slots__ = ["common", "url"]
        COMMON_FIELD_NUMBER: _ClassVar[int]
        URL_FIELD_NUMBER: _ClassVar[int]
        common: EventSchema.Common
        url: str
        def __init__(self, common: _Optional[_Union[EventSchema.Common, _Mapping]] = ..., url: _Optional[str] = ...) -> None: ...
    def __init__(self) -> None: ...

class EventSchemaForWeb(_message.Message):
    __slots__ = []
    class Enquete(_message.Message):
        __slots__ = ["enquete_ver", "player_name", "question1", "question2", "question3_1", "question3_2", "question3_3", "question4", "question5", "question6", "question7", "takasho_player_id", "takasho_player_short_id"]
        ENQUETE_VER_FIELD_NUMBER: _ClassVar[int]
        PLAYER_NAME_FIELD_NUMBER: _ClassVar[int]
        QUESTION1_FIELD_NUMBER: _ClassVar[int]
        QUESTION2_FIELD_NUMBER: _ClassVar[int]
        QUESTION3_1_FIELD_NUMBER: _ClassVar[int]
        QUESTION3_2_FIELD_NUMBER: _ClassVar[int]
        QUESTION3_3_FIELD_NUMBER: _ClassVar[int]
        QUESTION4_FIELD_NUMBER: _ClassVar[int]
        QUESTION5_FIELD_NUMBER: _ClassVar[int]
        QUESTION6_FIELD_NUMBER: _ClassVar[int]
        QUESTION7_FIELD_NUMBER: _ClassVar[int]
        TAKASHO_PLAYER_ID_FIELD_NUMBER: _ClassVar[int]
        TAKASHO_PLAYER_SHORT_ID_FIELD_NUMBER: _ClassVar[int]
        enquete_ver: str
        player_name: str
        question1: str
        question2: str
        question3_1: str
        question3_2: str
        question3_3: str
        question4: str
        question5: str
        question6: str
        question7: str
        takasho_player_id: str
        takasho_player_short_id: str
        def __init__(self, takasho_player_id: _Optional[str] = ..., takasho_player_short_id: _Optional[str] = ..., player_name: _Optional[str] = ..., enquete_ver: _Optional[str] = ..., question1: _Optional[str] = ..., question2: _Optional[str] = ..., question3_1: _Optional[str] = ..., question3_2: _Optional[str] = ..., question3_3: _Optional[str] = ..., question4: _Optional[str] = ..., question5: _Optional[str] = ..., question6: _Optional[str] = ..., question7: _Optional[str] = ...) -> None: ...
    class OpinionBox(_message.Message):
        __slots__ = ["category_id", "opinion_id", "opinion_string", "player_name", "takasho_player_id", "takasho_player_short_id", "type_id"]
        CATEGORY_ID_FIELD_NUMBER: _ClassVar[int]
        OPINION_ID_FIELD_NUMBER: _ClassVar[int]
        OPINION_STRING_FIELD_NUMBER: _ClassVar[int]
        PLAYER_NAME_FIELD_NUMBER: _ClassVar[int]
        TAKASHO_PLAYER_ID_FIELD_NUMBER: _ClassVar[int]
        TAKASHO_PLAYER_SHORT_ID_FIELD_NUMBER: _ClassVar[int]
        TYPE_ID_FIELD_NUMBER: _ClassVar[int]
        category_id: str
        opinion_id: str
        opinion_string: str
        player_name: str
        takasho_player_id: str
        takasho_player_short_id: str
        type_id: int
        def __init__(self, takasho_player_id: _Optional[str] = ..., takasho_player_short_id: _Optional[str] = ..., player_name: _Optional[str] = ..., type_id: _Optional[int] = ..., opinion_id: _Optional[str] = ..., category_id: _Optional[str] = ..., opinion_string: _Optional[str] = ...) -> None: ...
    def __init__(self) -> None: ...

class PlayerEventLogForWeb(_message.Message):
    __slots__ = ["event_category", "event_id", "payload", "player_state"]
    class EventID(int, metaclass=_enum_type_wrapper.EnumTypeWrapper):
        __slots__ = []
    class Payload(_message.Message):
        __slots__ = ["enquete", "opinion_box"]
        ENQUETE_FIELD_NUMBER: _ClassVar[int]
        OPINION_BOX_FIELD_NUMBER: _ClassVar[int]
        enquete: EventSchemaForWeb.Enquete
        opinion_box: EventSchemaForWeb.OpinionBox
        def __init__(self, enquete: _Optional[_Union[EventSchemaForWeb.Enquete, _Mapping]] = ..., opinion_box: _Optional[_Union[EventSchemaForWeb.OpinionBox, _Mapping]] = ...) -> None: ...
    ENQUETE: PlayerEventLogForWeb.EventID
    EVENT_CATEGORY_FIELD_NUMBER: _ClassVar[int]
    EVENT_ID_FIELD_NUMBER: _ClassVar[int]
    NONE: PlayerEventLogForWeb.EventID
    OPINION_BOX: PlayerEventLogForWeb.EventID
    PAYLOAD_FIELD_NUMBER: _ClassVar[int]
    PLAYER_STATE_FIELD_NUMBER: _ClassVar[int]
    event_category: str
    event_id: PlayerEventLogForWeb.EventID
    payload: PlayerEventLogForWeb.Payload
    player_state: str
    def __init__(self, event_category: _Optional[str] = ..., event_id: _Optional[_Union[PlayerEventLogForWeb.EventID, str]] = ..., payload: _Optional[_Union[PlayerEventLogForWeb.Payload, _Mapping]] = ..., player_state: _Optional[str] = ...) -> None: ...
